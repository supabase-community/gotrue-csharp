{
  "api/Supabase.Gotrue.AdminClient.html": {
    "href": "api/Supabase.Gotrue.AdminClient.html",
    "title": "Class AdminClient | gotrue-csharp",
    "keywords": "Class AdminClient Namespace Supabase.Gotrue Assembly Supabase.Gotrue.dll Admin client for interacting with the Gotrue API. Intended for use on servers or other secure environments. This client does NOT manage user sessions or track any other state. public class AdminClient : IGotrueAdminClient<User>, IGettableHeaders Inheritance object AdminClient Implements IGotrueAdminClient<User> IGettableHeaders Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors AdminClient(string, ClientOptions?) Initialize the client with a service key. public AdminClient(string serviceKey, ClientOptions? options = null) Parameters serviceKey string A valid JWT. Must be a full-access API key (e.g. 'service_role' or 'supabase_admin'). options ClientOptions Properties GetHeaders Headers sent to the API on every request. public Func<Dictionary<string, string>>? GetHeaders { get; set; } Property Value Func<Dictionary<string, string>> Options The initialized client options. public ClientOptions Options { get; } Property Value ClientOptions Methods CreateUser(AdminUserAttributes) Creates a user using the admin key (not the anonymous key). Used in trusted server environments, not client apps. public Task<User?> CreateUser(AdminUserAttributes attributes) Parameters attributes AdminUserAttributes Returns Task<User> CreateUser(string, string, AdminUserAttributes?) Creates a user using the admin key (not the anonymous key). Used in trusted server environments, not client apps. public Task<User?> CreateUser(string email, string password, AdminUserAttributes? attributes = null) Parameters email string password string attributes AdminUserAttributes Returns Task<User> DeleteFactor(MfaAdminDeleteFactorParams) Deletes a factor on a user. This will log the user out of all active sessions if the deleted factor was verified. public Task<MfaAdminDeleteFactorResponse?> DeleteFactor(MfaAdminDeleteFactorParams deleteFactorParams) Parameters deleteFactorParams MfaAdminDeleteFactorParams Returns Task<MfaAdminDeleteFactorResponse> A MfaAdminDeleteFactorResponse containing the deleted factor id. DeleteUser(string) Creates a user using the admin key (not the anonymous key). Used in trusted server environments, not client apps. public Task<bool> DeleteUser(string uid) Parameters uid string Returns Task<bool> GenerateLink(GenerateLinkOptions) Generates email links and OTPs to be sent via a custom email provider. public Task<GenerateLinkResponse?> GenerateLink(GenerateLinkOptions options) Parameters options GenerateLinkOptions Options for this call. Password is required for SignUp, Data is an optional parameter for SignUp. Returns Task<GenerateLinkResponse> GetUser(string) Gets a user from a user's JWT. This is using the GoTrue server to validate a user's JWT. public Task<User?> GetUser(string jwt) Parameters jwt string Returns Task<User> GetUserById(string) Gets a user by ID from the server using the admin key (not the anonymous key). public Task<User?> GetUserById(string userId) Parameters userId string Returns Task<User> InviteUserByEmail(string, InviteUserByEmailOptions?) Sends an email to the user. public Task<bool> InviteUserByEmail(string email, InviteUserByEmailOptions? options = null) Parameters email string options InviteUserByEmailOptions Returns Task<bool> ListFactors(MfaAdminListFactorsParams) Lists all factors associated to a specific user. public Task<MfaAdminListFactorsResponse?> ListFactors(MfaAdminListFactorsParams listFactorsParams) Parameters listFactorsParams MfaAdminListFactorsParams Returns Task<MfaAdminListFactorsResponse> A list of Factor that this user has enabled. ListUsers(string?, string?, SortOrder, int?, int?) Lists users public Task<UserList<User>?> ListUsers(string? filter = null, string? sortBy = null, Constants.SortOrder sortOrder = SortOrder.Descending, int? page = null, int? perPage = null) Parameters filter string A string for example part of the email sortBy string Snake case string of the given key, currently only created_at is supported sortOrder Constants.SortOrder asc or desc, if null desc is used page int? page to show for pagination perPage int? items per page for pagination Returns Task<UserList<User>> Update(UserAttributes) Updates a User using the service key public Task<User?> Update(UserAttributes attributes) Parameters attributes UserAttributes Returns Task<User> UpdateUserById(string, AdminUserAttributes) Update user by Id public Task<User?> UpdateUserById(string userId, AdminUserAttributes userData) Parameters userId string userData AdminUserAttributes Returns Task<User>"
  },
  "api/Supabase.Gotrue.AdminUserAttributes.html": {
    "href": "api/Supabase.Gotrue.AdminUserAttributes.html",
    "title": "Class AdminUserAttributes | gotrue-csharp",
    "keywords": "Class AdminUserAttributes Namespace Supabase.Gotrue Assembly Supabase.Gotrue.dll Ref: https://supabase.github.io/gotrue-js/interfaces/AdminUserAttributes.html public class AdminUserAttributes : UserAttributes Inheritance object UserAttributes AdminUserAttributes Inherited Members UserAttributes.Email UserAttributes.EmailChangeToken UserAttributes.Nonce UserAttributes.Password UserAttributes.Phone UserAttributes.Data object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties AppMetadata A custom data object for app_metadata that. Can be any JSON serializable data. Only a service role can modify Note: GoTrue does not yest support creating a user with app metadata (see: https://github.com/supabase/gotrue-js/blob/d7b334a4283027c65814aa81715ffead262f0bfa/test/GoTrueApi.test.ts#L45) [JsonProperty(\"app_metadata\")] public Dictionary<string, object> AppMetadata { get; set; } Property Value Dictionary<string, object> BanDuration Determines how long a user is banned for. This property is ignored when creating a user. If you want to create a user banned, first create the user then update it sending this property. The format for the ban duration follows a strict sequence of decimal numbers with a unit suffix. Valid time units are \"ns\", \"us\" (or \"Âµs\"), \"ms\", \"s\", \"m\", \"h\". For example, some possible durations include: '300ms', '2h45m', '1200s'. Setting the ban duration to \"none\" lifts the ban on the user. Only a service role can modify. [JsonProperty(\"ban_duration\")] public string? BanDuration { get; set; } Property Value string EmailConfirm Sets if a user has confirmed their email address. Only a service role can modify [JsonProperty(\"email_confirm\")] public bool? EmailConfirm { get; set; } Property Value bool? PhoneConfirm Sets if a user has confirmed their phone number. Only a service role can modify [JsonProperty(\"phone_confirm\")] public bool? PhoneConfirm { get; set; } Property Value bool? UserMetadata A custom data object for user_metadata. Can be any JSON serializable data. Only a service role can modify. [JsonProperty(\"user_metadata\")] public Dictionary<string, object> UserMetadata { get; set; } Property Value Dictionary<string, object>"
  },
  "api/Supabase.Gotrue.Api.html": {
    "href": "api/Supabase.Gotrue.Api.html",
    "title": "Class Api | gotrue-csharp",
    "keywords": "Class Api Namespace Supabase.Gotrue Assembly Supabase.Gotrue.dll The REST calls to the Gotrue API. public class Api : IGotrueApi<User, Session>, IGettableHeaders Inheritance object Api Implements IGotrueApi<User, Session> IGettableHeaders Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Api(string, Dictionary<string, string>?) Creates a new API client public Api(string url, Dictionary<string, string>? headers = null) Parameters url string headers Dictionary<string, string> Properties GetHeaders Function that can be set to return dynamic headers. Headers specified in the constructor will ALWAYS take precedence over headers returned by this function. public Func<Dictionary<string, string>>? GetHeaders { get; set; } Property Value Func<Dictionary<string, string>> Headers Headers to be sent with every request. These will be merged with any headers returned by GetHeaders. protected Dictionary<string, string> Headers { get; set; } Property Value Dictionary<string, string> Methods Challenge(string, MfaChallengeParams) public Task<MfaChallengeResponse?> Challenge(string jwt, MfaChallengeParams mfaChallengeParams) Parameters jwt string mfaChallengeParams MfaChallengeParams Returns Task<MfaChallengeResponse> CreateUser(string, AdminUserAttributes?) Create a user public Task<User?> CreateUser(string jwt, AdminUserAttributes? attributes = null) Parameters jwt string A valid JWT. Must be a full-access API key (e.g. service_role key). attributes AdminUserAttributes Additional administrative details Returns Task<User> DeleteFactor(string, MfaAdminDeleteFactorParams) public Task<MfaAdminDeleteFactorResponse?> DeleteFactor(string jwt, MfaAdminDeleteFactorParams deleteFactorParams) Parameters jwt string deleteFactorParams MfaAdminDeleteFactorParams Returns Task<MfaAdminDeleteFactorResponse> DeleteUser(string, string) Delete a user public Task<BaseResponse> DeleteUser(string uid, string jwt) Parameters uid string The user uid you want to remove. jwt string A valid JWT. Must be a full-access API key (e.g. service_role key). Returns Task<BaseResponse> Enroll(string, MfaEnrollParams) public Task<MfaEnrollResponse?> Enroll(string jwt, MfaEnrollParams mfaEnrollParams) Parameters jwt string mfaEnrollParams MfaEnrollParams Returns Task<MfaEnrollResponse> ExchangeCodeForSession(string, string) Log in an existing user via code from third-party provider. public Task<Session?> ExchangeCodeForSession(string codeVerifier, string authCode) Parameters codeVerifier string Generated verifier (probably from GetUrlForProvider) authCode string The received Auth Code Callback Returns Task<Session> GenerateLink(string, GenerateLinkOptions) Generates email links and OTPs to be sent via a custom email provider. public Task<BaseResponse> GenerateLink(string jwt, GenerateLinkOptions options) Parameters jwt string options GenerateLinkOptions Returns Task<BaseResponse> GetUriForProvider(Provider, SignInOptions?) public ProviderAuthState GetUriForProvider(Constants.Provider provider, SignInOptions? options = null) Parameters provider Constants.Provider options SignInOptions Returns ProviderAuthState GetUser(string) Gets User Details public Task<User?> GetUser(string jwt) Parameters jwt string Returns Task<User> GetUserById(string, string) Get User details by Id public Task<User?> GetUserById(string jwt, string userId) Parameters jwt string A valid JWT. Must be a full-access API key (e.g. service_role key). userId string userID Returns Task<User> InviteUserByEmail(string, string, InviteUserByEmailOptions?) Sends an invite link to an email address. public Task<BaseResponse> InviteUserByEmail(string email, string jwt, InviteUserByEmailOptions? options = null) Parameters email string jwt string this token needs role 'supabase_admin' or 'service_role' options InviteUserByEmailOptions Returns Task<BaseResponse> LinkIdentity(string, Provider, SignInOptions) Links an oauth identity to an existing user. This method requires the PKCE flow. public Task<ProviderAuthState> LinkIdentity(string token, Constants.Provider provider, SignInOptions options) Parameters token string User's token provider Constants.Provider Provider to Link options SignInOptions Returns Task<ProviderAuthState> ListFactors(string, MfaAdminListFactorsParams) public Task<BaseResponse> ListFactors(string jwt, MfaAdminListFactorsParams listFactorsParams) Parameters jwt string listFactorsParams MfaAdminListFactorsParams Returns Task<BaseResponse> ListUsers(string, string?, string?, SortOrder, int?, int?) Lists users public Task<UserList<User>?> ListUsers(string jwt, string? filter = null, string? sortBy = null, Constants.SortOrder sortOrder = SortOrder.Descending, int? page = null, int? perPage = null) Parameters jwt string A valid JWT. Must be a full-access API key (e.g. service_role key). filter string A string for example part of the email sortBy string Snake case string of the given key, currently only created_at is supported sortOrder Constants.SortOrder asc or desc, if null desc is used page int? page to show for pagination perPage int? items per page for pagination Returns Task<UserList<User>> Reauthenticate(string) Sends a re-authentication request, used for password changes. See: https://github.com/supabase/gotrue#get-reauthenticate public Task<BaseResponse> Reauthenticate(string userJwt) Parameters userJwt string The user's auth token. Returns Task<BaseResponse> RefreshAccessToken(string, string) Generates a new Session given a user's access token and refresh token. public Task<Session?> RefreshAccessToken(string accessToken, string refreshToken) Parameters accessToken string refreshToken string Returns Task<Session> ResetPasswordForEmail(ResetPasswordForEmailOptions) Sends a password reset request to an email address. This Method supports the PKCE Flow public Task<ResetPasswordForEmailState> ResetPasswordForEmail(ResetPasswordForEmailOptions options) Parameters options ResetPasswordForEmailOptions Returns Task<ResetPasswordForEmailState> ResetPasswordForEmail(string) Sends a reset request to an email address. public Task<BaseResponse> ResetPasswordForEmail(string email) Parameters email string Returns Task<BaseResponse> SendMagicLinkEmail(string, SignInOptions?) Sends a magic login link to an email address. public Task<BaseResponse> SendMagicLinkEmail(string email, SignInOptions? options = null) Parameters email string options SignInOptions Returns Task<BaseResponse> SendMobileOTP(string) Sends a mobile OTP via SMS. Will register the account if it doesn't already exist public Task<BaseResponse> SendMobileOTP(string phone) Parameters phone string phone The user's phone number WITH international prefix Returns Task<BaseResponse> Settings() Calls the GoTrue server to get the settings (for example, if email auto confirmation is turned on) public Task<Settings?> Settings() Returns Task<Settings> mpose up -d SignInAnonymously(SignInAnonymouslyOptions?) Creates a new anonymous user. public Task<Session?> SignInAnonymously(SignInAnonymouslyOptions? options = null) Parameters options SignInAnonymouslyOptions Returns Task<Session> A session where the is_anonymous claim in the access token JWT set to true SignInWithEmail(string, string) Logs in an existing user using their email address. public Task<Session?> SignInWithEmail(string email, string password) Parameters email string password string Returns Task<Session> SignInWithIdToken(Provider, string, string?, string?, string?) Allows signing in with an ID token issued by certain supported providers. The [idToken] is verified for validity and a new session is established. This method of signing in only supports [Provider.Google] or [Provider.Apple]. public Task<Session?> SignInWithIdToken(Constants.Provider provider, string idToken, string? accessToken = null, string? nonce = null, string? captchaToken = null) Parameters provider Constants.Provider A supported provider (Google, Apple, Azure, Facebook) idToken string OIDC ID token issued by the specified provider. The iss claim in the ID token must match the supplied provider. Some ID tokens contain an at_hash which require that you provide an access_token value to be accepted properly. If the token contains a nonce claim you must supply the nonce used to obtain the ID token. accessToken string If the ID token contains an at_hash claim, then the hash of this value is compared to the value in the ID token. nonce string If the ID token contains a nonce claim, then the hash of this value is compared to the value in the ID token. captchaToken string Verification token received when the user completes the captcha on the site. Returns Task<Session> SignInWithOtp(SignInWithPasswordlessEmailOptions) Log in a user using magiclink or a one-time password (OTP). If the {{ .ConfirmationURL }} variable is specified in the email template, a magiclink will be sent. If the {{ .Token }} variable is specified in the email template, an OTP will be sent. If you're using phone sign-ins, only an OTP will be sent. You won't be able to send a magiclink for phone sign-ins. Be aware that you may get back an error message that will not distinguish between the cases where the account does not exist or, that the account can only be accessed via social login. Do note that you will need to configure a Whatsapp sender on Twilio if you are using phone sign in with the 'whatsapp' channel. The whatsapp channel is not supported on other providers at this time. public Task<PasswordlessSignInState> SignInWithOtp(SignInWithPasswordlessEmailOptions options) Parameters options SignInWithPasswordlessEmailOptions Returns Task<PasswordlessSignInState> SignInWithOtp(SignInWithPasswordlessPhoneOptions) Log in a user using magiclink or a one-time password (OTP). If the {{ .ConfirmationURL }} variable is specified in the email template, a magiclink will be sent. If the {{ .Token }} variable is specified in the email template, an OTP will be sent. If you're using phone sign-ins, only an OTP will be sent. You won't be able to send a magiclink for phone sign-ins. Be aware that you may get back an error message that will not distinguish between the cases where the account does not exist or, that the account can only be accessed via social login. Do note that you will need to configure a Whatsapp sender on Twilio if you are using phone sign in with the 'whatsapp' channel. The whatsapp channel is not supported on other providers at this time. public Task<PasswordlessSignInState> SignInWithOtp(SignInWithPasswordlessPhoneOptions options) Parameters options SignInWithPasswordlessPhoneOptions Returns Task<PasswordlessSignInState> SignInWithPhone(string, string) Logs in an existing user using their phone number and password. public Task<Session?> SignInWithPhone(string phone, string password) Parameters phone string The phone number of the user. password string The password of the user. Returns Task<Session> SignInWithSSO(Guid, SignInWithSSOOptions?) public Task<SSOResponse?> SignInWithSSO(Guid providerId, SignInWithSSOOptions? options = null) Parameters providerId Guid options SignInWithSSOOptions Returns Task<SSOResponse> SignInWithSSO(string, SignInWithSSOOptions?) public Task<SSOResponse?> SignInWithSSO(string domain, SignInWithSSOOptions? options = null) Parameters domain string options SignInWithSSOOptions Returns Task<SSOResponse> SignOut(string, SignOutScope) Removes a logged-in session. public Task<BaseResponse> SignOut(string jwt, Constants.SignOutScope scope = SignOutScope.Global) Parameters jwt string scope Constants.SignOutScope Returns Task<BaseResponse> SignUpWithEmail(string, string, SignUpOptions?) Signs a user up using an email address and password. public Task<Session?> SignUpWithEmail(string email, string password, SignUpOptions? options = null) Parameters email string password string options SignUpOptions Optional Signup data. Returns Task<Session> SignUpWithPhone(string, string, SignUpOptions?) Signs up a new user using their phone number and a password.The phone number of the user. public Task<Session?> SignUpWithPhone(string phone, string password, SignUpOptions? options = null) Parameters phone string The phone number of the user. password string The password of the user. options SignUpOptions Optional Signup data. Returns Task<Session> Unenroll(string, MfaUnenrollParams) public Task<MfaUnenrollResponse?> Unenroll(string jwt, MfaUnenrollParams mfaUnenrollParams) Parameters jwt string mfaUnenrollParams MfaUnenrollParams Returns Task<MfaUnenrollResponse> UnlinkIdentity(string, UserIdentity) Unlinks an identity from a user by deleting it. The user will no longer be able to sign in with that identity once it's unlinked. public Task<bool> UnlinkIdentity(string token, UserIdentity userIdentity) Parameters token string User's token userIdentity UserIdentity Identity to be unlinked Returns Task<bool> UpdateUser(string, UserAttributes) Updates the User data public Task<User?> UpdateUser(string jwt, UserAttributes attributes) Parameters jwt string attributes UserAttributes Returns Task<User> UpdateUserById(string, string, UserAttributes) Update user by Id public Task<User?> UpdateUserById(string jwt, string userId, UserAttributes userData) Parameters jwt string A valid JWT. Must be a full-access API key (e.g. service_role key). userId string userID userData UserAttributes User attributes e.g. email, password, etc. Returns Task<User> Verify(string, MfaVerifyParams) public Task<MfaVerifyResponse?> Verify(string jwt, MfaVerifyParams mfaVerifyParams) Parameters jwt string mfaVerifyParams MfaVerifyParams Returns Task<MfaVerifyResponse> VerifyEmailOTP(string, string, EmailOtpType) Send User supplied Email OTP to be verified public Task<Session?> VerifyEmailOTP(string email, string token, Constants.EmailOtpType type) Parameters email string The user's email address token string token that user was sent to their mobile phone type Constants.EmailOtpType Type of verification, e.g. invite, recovery, etc. Returns Task<Session> VerifyMobileOTP(string, string, MobileOtpType) Send User supplied Mobile OTP to be verified public Task<Session?> VerifyMobileOTP(string phone, string token, Constants.MobileOtpType type) Parameters phone string The user's phone number WITH international prefix token string token that user was sent to their mobile phone type Constants.MobileOtpType e.g. SMS or phone change Returns Task<Session> VerifyTokenHash(string, EmailOtpType) Verify token hash used in an email confirmation link. public Task<Session?> VerifyTokenHash(string tokenHash, Constants.EmailOtpType type) Parameters tokenHash string The token hash used in an email confirmation link type Constants.EmailOtpType Type of verification, e.g. email. Returns Task<Session>"
  },
  "api/Supabase.Gotrue.Client.html": {
    "href": "api/Supabase.Gotrue.Client.html",
    "title": "Class Client | gotrue-csharp",
    "keywords": "Class Client Namespace Supabase.Gotrue Assembly Supabase.Gotrue.dll Supports all classes in the .NET class hierarchy and provides low-level services to derived classes. This is the ultimate base class of all .NET classes; it is the root of the type hierarchy. public class Client : IGotrueClient<User, Session>, IGettableHeaders Inheritance object Client Implements IGotrueClient<User, Session> IGettableHeaders Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors Client(ClientOptions?) Initializes the GoTrue stateful client. You will likely want to at least specify a ClientOptions.Url Sessions are not automatically retrieved when this object is created. If you want to load the session from your persistence store, GotrueSessionPersistence . If you want to load/refresh the session, RetrieveSessionAsync . For a typical client application, you'll want to load the session from persistence and then refresh it. If your application is listening for session changes, you'll get two SignIn notifications if the persisted session is valid - one for the session loaded from disk, and a second on a successful session refresh. var client = new Supabase.Gotrue.Client(options); client.LoadSession(); await client.RetrieveSessionAsync(); public Client(ClientOptions? options = null) Parameters options ClientOptions Properties CurrentSession The current Session as managed by this client. Does not refresh tokens or have any other side effects. You probably don't want to directly make changes to this object - you'll want to use other methods on this class to make changes. public Session? CurrentSession { get; } Property Value Session CurrentUser The currently logged in User. This is a local cache of the current session User. To persist modifications to the User you'll want to use other methods. Update(UserAttributes)> public User? CurrentUser { get; } Property Value User GetHeaders Headers sent to the API on every request. public Func<Dictionary<string, string>>? GetHeaders { get; set; } Property Value Func<Dictionary<string, string>> Online Indicates if the client should be considered online or offline. In a server environment, this client would likely always be online. On a mobile client, you will want to pair this with a network implementation to turn this on and off as the device goes online and offline. public bool Online { get; set; } Property Value bool Options Returns the client options. public ClientOptions Options { get; } Property Value ClientOptions TokenRefresh Get the TokenRefresh object, if it exists public TokenRefresh? TokenRefresh { get; } Property Value TokenRefresh Methods AddDebugListener(Action<string, Exception?>) Add a listener to get errors that occur outside of a typical Exception flow. In particular, this is used to get errors and messages from the background thread that automatically manages refreshing the user's token. public void AddDebugListener(Action<string, Exception?> listener) Parameters listener Action<string, Exception> Callback method for debug messages AddStateChangedListener(AuthEventHandler) Adds a listener to be notified when the user state changes (e.g. the user logs in, logs out, the token is refreshed, etc). Constants.AuthState public void AddStateChangedListener(IGotrueClient<User, Session>.AuthEventHandler authEventHandler) Parameters authEventHandler IGotrueClient<User, Session>.AuthEventHandler Challenge(MfaChallengeParams) Prepares a challenge used to verify that a user has access to a MFA factor. public Task<MfaChallengeResponse?> Challenge(MfaChallengeParams mfaChallengeParams) Parameters mfaChallengeParams MfaChallengeParams Returns Task<MfaChallengeResponse> ChallengeAndVerify(MfaChallengeAndVerifyParams) Helper method which creates a challenge and immediately uses the given code to verify against it thereafter. The verification code is provided by the user by entering a code seen in their authenticator app. public Task<Session?> ChallengeAndVerify(MfaChallengeAndVerifyParams mfaChallengeAndVerifyParams) Parameters mfaChallengeAndVerifyParams MfaChallengeAndVerifyParams Returns Task<Session> ClearStateChangedListeners() Clears all of the listeners from receiving event state changes. WARNING: The persistence handler and refresh token thread are installed as state change listeners. Clearing the listeners will also delete these handlers. public void ClearStateChangedListeners() Debug(string, Exception?) Posts messages and exceptions to the debug listener. This is particularly useful for sorting out issues with the refresh token background thread. public void Debug(string message, Exception? e = null) Parameters message string e Exception Enroll(MfaEnrollParams) Starts the enrollment process for a new Multi-Factor Authentication (MFA) factor. This method creates a new unverified factor. To verify a factor, present the QR code or secret to the user and ask them to add it to their authenticator app. The user has to enter the code from their authenticator app to verify it. Upon verifying a factor, all other sessions are logged out and the current session's authenticator level is promoted to aal2. public Task<MfaEnrollResponse?> Enroll(MfaEnrollParams mfaEnrollParams) Parameters mfaEnrollParams MfaEnrollParams Returns Task<MfaEnrollResponse> ExchangeCodeForSession(string, string) Logs in an existing user via a third-party provider. public Task<Session?> ExchangeCodeForSession(string codeVerifier, string authCode) Parameters codeVerifier string authCode string Returns Task<Session> GetAuthenticatorAssuranceLevel() Returns the Authenticator Assurance Level (AAL) for the active session. aal1 (or null) means that the user's identity has been verified only with a conventional login (email+password, OTP, magic link, social login, etc.). aal2 means that the user's identity has been verified both with a conventional login and at least one MFA factor. Although this method returns a promise, it's fairly quick (microseconds) and rarely uses the network. You can use this to check whether the current user needs to be shown a screen to verify their MFA factors. public Task<MfaGetAuthenticatorAssuranceLevelResponse?> GetAuthenticatorAssuranceLevel() Returns Task<MfaGetAuthenticatorAssuranceLevelResponse> GetSessionFromUrl(Uri, bool) Parses a Session out of a Uri's Query parameters. public Task<Session?> GetSessionFromUrl(Uri uri, bool storeSession = true) Parameters uri Uri storeSession bool Returns Task<Session> GetUser(string) Get User details by JWT. Can be used to validate a JWT. public Task<User?> GetUser(string jwt) Parameters jwt string A valid JWT. Must be a JWT that originates from a user. Returns Task<User> LinkIdentity(Provider, SignInOptions) Links an oauth identity to an existing user. This method requires the PKCE flow. public Task<ProviderAuthState> LinkIdentity(Constants.Provider provider, SignInOptions options) Parameters provider Constants.Provider Provider to Link options SignInOptions Returns Task<ProviderAuthState> ListFactors() Returns the list of MFA factors enabled for this user public Task<MfaListFactorsResponse?> ListFactors() Returns Task<MfaListFactorsResponse> LoadSession() Loads the session from the persistence layer. public void LoadSession() NotifyAuthStateChange(AuthState) Notifies all listeners that the current user auth state has changed. This is mainly used internally to fire notifications - most client applications won't need this. public void NotifyAuthStateChange(Constants.AuthState stateChanged) Parameters stateChanged Constants.AuthState Reauthenticate() Used for re-authenticating a user in password changes. See: https://github.com/supabase/gotrue#get-reauthenticate public Task<bool> Reauthenticate() Returns Task<bool> Exceptions GotrueException RefreshSession() Refreshes the currently logged in User's Session. public Task<Session?> RefreshSession() Returns Task<Session> RefreshToken() Refreshes a Token using the current session. public Task RefreshToken() Returns Task RefreshToken(string, string) public Task RefreshToken(string accessToken, string refreshToken) Parameters accessToken string refreshToken string Returns Task RemoveStateChangedListener(AuthEventHandler) Removes a specified listener from event state changes. public void RemoveStateChangedListener(IGotrueClient<User, Session>.AuthEventHandler authEventHandler) Parameters authEventHandler IGotrueClient<User, Session>.AuthEventHandler ResetPasswordForEmail(ResetPasswordForEmailOptions) Sends a password reset request to an email address. Supports the PKCE Flow (the verifier from ResetPasswordForEmailState will be combined with ExchangeCodeForSession(string, string) in response) public Task<ResetPasswordForEmailState> ResetPasswordForEmail(ResetPasswordForEmailOptions options) Parameters options ResetPasswordForEmailOptions Returns Task<ResetPasswordForEmailState> ResetPasswordForEmail(string) Sends a reset request to an email address. public Task<bool> ResetPasswordForEmail(string email) Parameters email string Returns Task<bool> RetrieveSessionAsync() Typically called as part of the startup process for the client. This will take the currently loaded session (e.g. from a persistence implementation) and if possible attempt to refresh it. If the loaded session is expired or invalid, it will log the user out. public Task<Session?> RetrieveSessionAsync() Returns Task<Session> SendMagicLink(string, SignInOptions?) Sends a Magic email login link to the specified email. Most of the interesting configuration for this flow is done in the Supabase/GoTrue admin panel. public Task<bool> SendMagicLink(string email, SignInOptions? options = null) Parameters email string options SignInOptions Returns Task<bool> SetPersistence(IGotrueSessionPersistence<Session>) Sets the persistence implementation for the client (e.g. file system, local storage, etc). public void SetPersistence(IGotrueSessionPersistence<Session> persistence) Parameters persistence IGotrueSessionPersistence<Session> SetSession(string, string, bool) Sets a new session given a user's access token and their refresh token. Will destroy the current session (if existing) Raise a SignedOut event. Decode token 3a. If expired (or bool forceAccessTokenRefresh set), force an access token refresh. 3b. If not expired, set the CurrentSession and retrieve CurrentUser from the server using the accessToken. Raise a `SignedIn event if successful. public Task<Session> SetSession(string accessToken, string refreshToken, bool forceAccessTokenRefresh = false) Parameters accessToken string refreshToken string forceAccessTokenRefresh bool Returns Task<Session> Exceptions GotrueException Raised when token combination is invalid. Settings() Retrieves the settings from the server public Task<Settings?> Settings() Returns Task<Settings> Shutdown() Let all of the listeners know that the stateless client is being shutdown. In particular, the background thread that is used to refresh the token is stopped. public void Shutdown() SignIn(Provider, SignInOptions?) Retrieves a ProviderAuthState to redirect to for signing in with a Constants.Provider. This will likely be paired with a PKCE flow (set in SignInOptions) - after redirecting the user to the flow, you should pair with ExchangeCodeForSession(string, string) public Task<ProviderAuthState> SignIn(Constants.Provider provider, SignInOptions? options = null) Parameters provider Constants.Provider options SignInOptions Returns Task<ProviderAuthState> SignIn(SignInType, string, string?, string?) Log in an existing user, or login via a third-party provider. public Task<Session?> SignIn(Constants.SignInType type, string identifierOrToken, string? password = null, string? scopes = null) Parameters type Constants.SignInType Type of Credentials being passed identifierOrToken string An email, phone, or RefreshToken password string Password to account (optional if RefreshToken) scopes string A space-separated list of scopes granted to the OAuth application. Returns Task<Session> SignIn(string, SignInOptions?) Sends a magic link login email to the specified email. public Task<bool> SignIn(string email, SignInOptions? options = null) Parameters email string options SignInOptions Returns Task<bool> SignIn(string, string) Signs in a User. public Task<Session?> SignIn(string email, string password) Parameters email string password string Returns Task<Session> SignInAnonymously(SignInAnonymouslyOptions?) Creates a new anonymous user. public Task<Session?> SignInAnonymously(SignInAnonymouslyOptions? options = null) Parameters options SignInAnonymouslyOptions Returns Task<Session> A session where the is_anonymous claim in the access token JWT set to true SignInWithIdToken(Provider, string, string?, string?, string?) Allows signing in with an ID token issued by certain supported providers. The [idToken] is verified for validity and a new session is established. This method of signing in only supports [Provider.Google] or [Provider.Apple]. public Task<Session?> SignInWithIdToken(Constants.Provider provider, string idToken, string? accessToken = null, string? nonce = null, string? captchaToken = null) Parameters provider Constants.Provider Provider name or OIDC iss value identifying which provider should be used to verify the provided token. Supported names: google, apple, azure, facebook idToken string OIDC ID token issued by the specified provider. The iss claim in the ID token must match the supplied provider. Some ID tokens contain an at_hash which require that you provide an access_token value to be accepted properly. If the token contains a nonce claim you must supply the nonce used to obtain the ID token. accessToken string If the ID token contains an at_hash claim, then the hash of this value is compared to the value in the ID token. nonce string If the ID token contains a nonce claim, then the hash of this value is compared to the value in the ID token. captchaToken string Verification token received when the user completes the captcha on the site. Returns Task<Session> Remarks Calling this method will eliminate the current session (if any). SignInWithOtp(SignInWithPasswordlessEmailOptions) Log in a user using magiclink or a one-time password (OTP). If the {{ .ConfirmationURL }} variable is specified in the email template, a magiclink will be sent. If the {{ .Token }} variable is specified in the email template, an OTP will be sent. If you're using phone sign-ins, only an OTP will be sent. You won't be able to send a magiclink for phone sign-ins. Be aware that you may get back an error message that will not distinguish between the cases where the account does not exist or, that the account can only be accessed via social login. Do note that you will need to configure a Whatsapp sender on Twilio if you are using phone sign in with the 'whatsapp' channel. The whatsapp channel is not supported on other providers at this time. public Task<PasswordlessSignInState> SignInWithOtp(SignInWithPasswordlessEmailOptions options) Parameters options SignInWithPasswordlessEmailOptions Returns Task<PasswordlessSignInState> Remarks Calling this method will wipe out the current session (if any) SignInWithOtp(SignInWithPasswordlessPhoneOptions) Log in a user using magiclink or a one-time password (OTP). If the {{ .ConfirmationURL }} variable is specified in the email template, a magiclink will be sent. If the {{ .Token }} variable is specified in the email template, an OTP will be sent. If you're using phone sign-ins, only an OTP will be sent. You won't be able to send a magiclink for phone sign-ins. Be aware that you may get back an error message that will not distinguish between the cases where the account does not exist or, that the account can only be accessed via social login. Do note that you will need to configure a Whatsapp sender on Twilio if you are using phone sign in with the 'whatsapp' channel. The whatsapp channel is not supported on other providers at this time. public Task<PasswordlessSignInState> SignInWithOtp(SignInWithPasswordlessPhoneOptions options) Parameters options SignInWithPasswordlessPhoneOptions Returns Task<PasswordlessSignInState> Remarks Calling this method will wipe out the current session (if any) SignInWithPassword(string, string) Log in an existing user with an email and password or phone and password. public Task<Session?> SignInWithPassword(string email, string password) Parameters email string password string Returns Task<Session> SignInWithSSO(Guid, SignInWithSSOOptions?) Sign in using single sign on (SSO) as supported by supabase To use SSO you need to first set up the providers using the supabase CLI please follow the guide found here: https://supabase.com/docs/guides/auth/enterprise-sso/auth-sso-saml public Task<SSOResponse?> SignInWithSSO(Guid providerId, SignInWithSSOOptions? options = null) Parameters providerId Guid The guid of the provider you wish to use, obtained from running supabase sso list from the CLI options SignInWithSSOOptions The redirect uri and captcha token, if any Returns Task<SSOResponse> The Uri returned from supabase auth that a user can use to sign in to their given SSO provider (okta, microsoft entra, gsuite ect...) SignInWithSSO(string, SignInWithSSOOptions?) Sign in using single sign on (SSO) as supported by supabase To use SSO you need to first set up the providers using the supabase CLI please follow the guide found here: https://supabase.com/docs/guides/auth/enterprise-sso/auth-sso-saml public Task<SSOResponse?> SignInWithSSO(string domain, SignInWithSSOOptions? options = null) Parameters domain string Your organizations email domain to use for sign in, this domain needs to already be registered with supabase by running the CLI commands Example: google.com options SignInWithSSOOptions The redirect uri and captcha token, if any Returns Task<SSOResponse> The Uri returned from supabase auth that a user can use to sign in to their given SSO provider (okta, microsoft entra, gsuite ect...) SignOut(SignOutScope) Signs out and invalidates all sessions for a user. public Task SignOut(Constants.SignOutScope scope = SignOutScope.Global) Parameters scope Constants.SignOutScope Determines which sessions should be invalidated. By default, it will invalidate all session for a user Returns Task SignUp(SignUpType, string, string, SignUpOptions?) Signs up a user public Task<Session?> SignUp(Constants.SignUpType type, string identifier, string password, SignUpOptions? options = null) Parameters type Constants.SignUpType identifier string password string options SignUpOptions Object containing redirectTo and optional user metadata (data) Returns Task<Session> Remarks Calling this method will log out the current user session (if any). By default, the user needs to verify their email address before logging in. To turn this off, disable confirm email in your project. Confirm email determines if users need to confirm their email address after signing up. - If Confirm email is enabled, a user is returned but session is null. - If Confirm email is disabled, both a user and a session are returned. When the user confirms their email address, they are redirected to the SITE_URL by default. You can modify your SITE_URL or add additional redirect URLs in your project. If signUp() is called for an existing confirmed user: - If Confirm email is enabled in your project, an obfuscated/fake user object is returned. - If Confirm email is disabled, the error message, User already registered is returned. To fetch the currently logged-in user, refer to User. SignUp(string, string, SignUpOptions?) Signs up a user by email address. public Task<Session?> SignUp(string email, string password, SignUpOptions? options = null) Parameters email string password string options SignUpOptions Object containing redirectTo and optional user metadata (data) Returns Task<Session> Remarks By default, the user needs to verify their email address before logging in. To turn this off, disable Confirm email in your project. Confirm email determines if users need to confirm their email address after signing up. - If Confirm email is enabled, a user is returned but session is null. - If Confirm email is disabled, both a user and a session are returned. When the user confirms their email address, they are redirected to the SITE_URL by default. You can modify your SITE_URL or add additional redirect URLs in your project. If signUp() is called for an existing confirmed user: - If Confirm email is enabled in your project, an obfuscated/fake user object is returned. - If Confirm email is disabled, the error message, User already registered is returned. To fetch the currently logged-in user, refer to User . Unenroll(MfaUnenrollParams) Unenroll removes a MFA factor. A user has to have an aal2 authenticator level in order to unenroll a verified factor. public Task<MfaUnenrollResponse?> Unenroll(MfaUnenrollParams mfaUnenrollParams) Parameters mfaUnenrollParams MfaUnenrollParams Returns Task<MfaUnenrollResponse> UnlinkIdentity(UserIdentity) Unlinks an identity from a user by deleting it. The user will no longer be able to sign in with that identity once it's unlinked. public Task<bool> UnlinkIdentity(UserIdentity userIdentity) Parameters userIdentity UserIdentity Identity to be unlinked Returns Task<bool> Update(UserAttributes) Updates a User. public Task<User?> Update(UserAttributes attributes) Parameters attributes UserAttributes Returns Task<User> Verify(MfaVerifyParams) Verifies a code against a challenge. The verification code is provided by the user by entering a code seen in their authenticator app. public Task<Session?> Verify(MfaVerifyParams mfaVerifyParams) Parameters mfaVerifyParams MfaVerifyParams Returns Task<Session> VerifyOTP(string, string, EmailOtpType) Log in a user give a user supplied OTP received via email. public Task<Session?> VerifyOTP(string email, string token, Constants.EmailOtpType type = EmailOtpType.MagicLink) Parameters email string token string type Constants.EmailOtpType Defaults to MagicLink Returns Task<Session> VerifyOTP(string, string, MobileOtpType) Log in a user given a User supplied OTP received via mobile. public Task<Session?> VerifyOTP(string phone, string token, Constants.MobileOtpType type = MobileOtpType.SMS) Parameters phone string The user's phone number. token string Token sent to the user's phone. type Constants.MobileOtpType SMS or phone change Returns Task<Session> VerifyTokenHash(string, EmailOtpType) Log in a user given the token hash used in an email confirmation link. public Task<Session?> VerifyTokenHash(string tokenHash, Constants.EmailOtpType type = EmailOtpType.Email) Parameters tokenHash string type Constants.EmailOtpType Returns Task<Session>"
  },
  "api/Supabase.Gotrue.ClientOptions.html": {
    "href": "api/Supabase.Gotrue.ClientOptions.html",
    "title": "Class ClientOptions | gotrue-csharp",
    "keywords": "Class ClientOptions Namespace Supabase.Gotrue Assembly Supabase.Gotrue.dll Class representation options available to the Client. public class ClientOptions Inheritance object ClientOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields Headers Headers to be sent with subsequent requests. public Dictionary<string, string> Headers Field Value Dictionary<string, string> Properties AllowUnconfirmedUserSessions Very unlikely this flag needs to be changed except in very specific contexts. Enables tests to be E2E tests to be run without requiring users to have confirmed emails - mirrors the Gotrue server's configuration. public bool AllowUnconfirmedUserSessions { get; set; } Property Value bool AutoRefreshToken Should the Client automatically handle refreshing the User's Token? public bool AutoRefreshToken { get; set; } Property Value bool DebugRefreshToken Ask the TokenRefresh system to log extra debug info public bool DebugRefreshToken { get; set; } Property Value bool MaximumRefreshWaitTime By default, the Client will attempt to refresh the token when roughly 1/5 of the time is left before expiration (assuming AutoRefreshToken is true). InitRefreshTimer() The default expiration time for GoTrue servers is 3600 (1 hour), with a maximum of 604,800 seconds (one week). If you set the expiration to one week, you may want to refresh the token a bit more frequently. This setting allows you to set a custom threshold for when the client should AutoRefreshToken. The default value is 14400 seconds (4 hours). In this scenario, if you set the server expiration to one week and leave this value set to the default, as long as the user logs in at least once a week they should stay logged in indefinitely. public int MaximumRefreshWaitTime { get; set; } Property Value int Url Gotrue Endpoint public string Url { get; set; } Property Value string"
  },
  "api/Supabase.Gotrue.Constants.AuthState.html": {
    "href": "api/Supabase.Gotrue.Constants.AuthState.html",
    "title": "Enum Constants.AuthState | gotrue-csharp",
    "keywords": "Enum Constants.AuthState Namespace Supabase.Gotrue Assembly Supabase.Gotrue.dll States that the Auth Client will raise events for. public enum Constants.AuthState Fields MfaChallengeVerified = 6 PasswordRecovery = 3 Shutdown = 5 SignedIn = 0 SignedOut = 1 TokenRefreshed = 4 UserUpdated = 2"
  },
  "api/Supabase.Gotrue.Constants.EmailOtpType.html": {
    "href": "api/Supabase.Gotrue.Constants.EmailOtpType.html",
    "title": "Enum Constants.EmailOtpType | gotrue-csharp",
    "keywords": "Enum Constants.EmailOtpType Namespace Supabase.Gotrue Assembly Supabase.Gotrue.dll public enum Constants.EmailOtpType Fields [MapTo(\"email\", null)] Email = 5 [MapTo(\"email_change\", null)] EmailChange = 4 [MapTo(\"invite\", null)] Invite = 1 [MapTo(\"magiclink\", null)] MagicLink = 2 [MapTo(\"recovery\", null)] Recovery = 3 [MapTo(\"signup\", null)] Signup = 0"
  },
  "api/Supabase.Gotrue.Constants.MobileOtpType.html": {
    "href": "api/Supabase.Gotrue.Constants.MobileOtpType.html",
    "title": "Enum Constants.MobileOtpType | gotrue-csharp",
    "keywords": "Enum Constants.MobileOtpType Namespace Supabase.Gotrue Assembly Supabase.Gotrue.dll public enum Constants.MobileOtpType Fields [MapTo(\"phone_change\", null)] PhoneChange = 1 [MapTo(\"sms\", null)] SMS = 0"
  },
  "api/Supabase.Gotrue.Constants.OAuthFlowType.html": {
    "href": "api/Supabase.Gotrue.Constants.OAuthFlowType.html",
    "title": "Enum Constants.OAuthFlowType | gotrue-csharp",
    "keywords": "Enum Constants.OAuthFlowType Namespace Supabase.Gotrue Assembly Supabase.Gotrue.dll Represents an OAuth Flow type public enum Constants.OAuthFlowType Fields [MapTo(\"implicit\", null)] Implicit = 0 [MapTo(\"pkce\", null)] PKCE = 1"
  },
  "api/Supabase.Gotrue.Constants.Provider.html": {
    "href": "api/Supabase.Gotrue.Constants.Provider.html",
    "title": "Enum Constants.Provider | gotrue-csharp",
    "keywords": "Enum Constants.Provider Namespace Supabase.Gotrue Assembly Supabase.Gotrue.dll Providers available to Supabase Ref: https://supabase.github.io/gotrue-js/modules.html#Provider public enum Constants.Provider Fields [MapTo(\"anonymous_users\", null)] AnonymousUsers = 0 [MapTo(\"apple\", null)] Apple = 1 [MapTo(\"azure\", null)] Azure = 2 [MapTo(\"bitbucket\", null)] Bitbucket = 3 [MapTo(\"discord\", null)] Discord = 4 [MapTo(\"facebook\", null)] Facebook = 5 [MapTo(\"figma\", null)] Figma = 6 [MapTo(\"fly\", null)] Fly = 7 [MapTo(\"github\", null)] Github = 8 [MapTo(\"gitlab\", null)] Gitlab = 9 [MapTo(\"google\", null)] Google = 10 [MapTo(\"kakao\", null)] Kakao = 11 [MapTo(\"keycloak\", null)] KeyCloak = 12 [MapTo(\"linkedin\", null)] LinkedIn = 13 [MapTo(\"linkedin_oidc\", null)] LinkedInOIDC = 14 [MapTo(\"notion\", null)] Notion = 15 [MapTo(\"slack\", null)] Slack = 16 [MapTo(\"spotify\", null)] Spotify = 17 [MapTo(\"twitch\", null)] Twitch = 18 [MapTo(\"twitter\", null)] Twitter = 19 [MapTo(\"workos\", null)] WorkOS = 20 [MapTo(\"zoom\", null)] Zoom = 21"
  },
  "api/Supabase.Gotrue.Constants.SignInType.html": {
    "href": "api/Supabase.Gotrue.Constants.SignInType.html",
    "title": "Enum Constants.SignInType | gotrue-csharp",
    "keywords": "Enum Constants.SignInType Namespace Supabase.Gotrue Assembly Supabase.Gotrue.dll Specifies the functionality expected from the SignIn method public enum Constants.SignInType Fields Email = 0 Phone = 1 RefreshToken = 2"
  },
  "api/Supabase.Gotrue.Constants.SignOutScope.html": {
    "href": "api/Supabase.Gotrue.Constants.SignOutScope.html",
    "title": "Enum Constants.SignOutScope | gotrue-csharp",
    "keywords": "Enum Constants.SignOutScope Namespace Supabase.Gotrue Assembly Supabase.Gotrue.dll public enum Constants.SignOutScope Fields [MapTo(\"global\", null)] Global = 0 [MapTo(\"local\", null)] Local = 1 [MapTo(\"others\", null)] Others = 2"
  },
  "api/Supabase.Gotrue.Constants.SignUpType.html": {
    "href": "api/Supabase.Gotrue.Constants.SignUpType.html",
    "title": "Enum Constants.SignUpType | gotrue-csharp",
    "keywords": "Enum Constants.SignUpType Namespace Supabase.Gotrue Assembly Supabase.Gotrue.dll Specifies the functionality expected from the SignUp method public enum Constants.SignUpType Fields Email = 0 Phone = 1"
  },
  "api/Supabase.Gotrue.Constants.SortOrder.html": {
    "href": "api/Supabase.Gotrue.Constants.SortOrder.html",
    "title": "Enum Constants.SortOrder | gotrue-csharp",
    "keywords": "Enum Constants.SortOrder Namespace Supabase.Gotrue Assembly Supabase.Gotrue.dll public enum Constants.SortOrder Fields [MapTo(\"asc\", null)] Ascending = 0 [MapTo(\"desc\", null)] Descending = 1"
  },
  "api/Supabase.Gotrue.Constants.html": {
    "href": "api/Supabase.Gotrue.Constants.html",
    "title": "Class Constants | gotrue-csharp",
    "keywords": "Class Constants Namespace Supabase.Gotrue Assembly Supabase.Gotrue.dll Constants used throughout the Gotrue Client public static class Constants Inheritance object Constants Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields AUDIENCE public const string AUDIENCE = \"\" Field Value string CookieOptions public static readonly Dictionary<string, object> CookieOptions Field Value Dictionary<string, object> EXPIRY_MARGIN public const int EXPIRY_MARGIN = 60000 Field Value int GOTRUE_URL URL for the Gotrue server. Defaults to localhost:9999. public const string GOTRUE_URL = \"http://localhost:9999\" Field Value string STORAGE_KEY public const string STORAGE_KEY = \"supabase.auth.token\" Field Value string"
  },
  "api/Supabase.Gotrue.DebugNotification.html": {
    "href": "api/Supabase.Gotrue.DebugNotification.html",
    "title": "Class DebugNotification | gotrue-csharp",
    "keywords": "Class DebugNotification Namespace Supabase.Gotrue Assembly Supabase.Gotrue.dll Manages the debug listeners for the Gotrue Client. You'll want to install a debug listener to get debug information back - especially for errors from the background RefreshToken thread. public class DebugNotification Inheritance object DebugNotification Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods AddDebugListener(Action<string, Exception?>) Add a debug listener to the Gotrue Client. This will be called with debug information public void AddDebugListener(Action<string, Exception?> listener) Parameters listener Action<string, Exception> Log(string, Exception?) Send a debug message to all debug listeners public void Log(string message, Exception? e = null) Parameters message string e Exception"
  },
  "api/Supabase.Gotrue.Exceptions.FailureHint.Reason.html": {
    "href": "api/Supabase.Gotrue.Exceptions.FailureHint.Reason.html",
    "title": "Enum FailureHint.Reason | gotrue-csharp",
    "keywords": "Enum FailureHint.Reason Namespace Supabase.Gotrue.Exceptions Assembly Supabase.Gotrue.dll Best effort guess at why the exception was thrown. public enum FailureHint.Reason Fields AdminTokenRequired = 13 This operation requires a bearer/service key (do not include this key in a client app) BadSessionUrl = 15 Something wrong with the URL to session transformation ExpiredRefreshToken = 12 The refresh token expired. InvalidFlowType = 16 An invalid authentication flow has been selected. InvalidRefreshToken = 11 The refresh token is invalid. MfaChallengeUnverified = 19 NoSessionFound = 14 No/invalid session found Offline = 1 The client is set to run offline or the network is unavailable. SsoDomainNotFound = 17 The SSO domain provided was not registered via the CLI SsoProviderNotFound = 18 The sso provider ID was incorrect or does not exist Unknown = 0 The reason for the error could not be determined. UserAlreadyRegistered = 9 The user is already registered. UserBadEmailAddress = 6 The user's email address is invalid. UserBadLogin = 5 The user's login is invalid. UserBadMultiple = 3 The user's email address and password are invalid. UserBadPassword = 4 The user's password is invalid. UserBadPhoneNumber = 7 The user's phone number is invalid. UserEmailNotConfirmed = 2 The user's email address has not been confirmed. UserMissingInformation = 8 The user's information is incomplete. UserTooManyRequests = 10 Server rejected due to number of requests"
  },
  "api/Supabase.Gotrue.Exceptions.FailureHint.html": {
    "href": "api/Supabase.Gotrue.Exceptions.FailureHint.html",
    "title": "Class FailureHint | gotrue-csharp",
    "keywords": "Class FailureHint Namespace Supabase.Gotrue.Exceptions Assembly Supabase.Gotrue.dll Maps Supabase server errors to hints based on the status code and the contents of the error message. public static class FailureHint Inheritance object FailureHint Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods DetectReason(GotrueException) Detects the reason for the error based on the status code and the contents of the error message. public static FailureHint.Reason DetectReason(GotrueException gte) Parameters gte GotrueException Returns FailureHint.Reason"
  },
  "api/Supabase.Gotrue.Exceptions.GotrueException.html": {
    "href": "api/Supabase.Gotrue.Exceptions.GotrueException.html",
    "title": "Class GotrueException | gotrue-csharp",
    "keywords": "Class GotrueException Namespace Supabase.Gotrue.Exceptions Assembly Supabase.Gotrue.dll Errors from the GoTrue server are wrapped by this exception public class GotrueException : Exception, ISerializable Inheritance object Exception GotrueException Implements ISerializable Inherited Members Exception.GetBaseException() Exception.GetObjectData(SerializationInfo, StreamingContext) Exception.GetType() Exception.ToString() Exception.Data Exception.HelpLink Exception.HResult Exception.InnerException Exception.Message Exception.Source Exception.StackTrace Exception.TargetSite Exception.SerializeObjectState object.Equals(object) object.Equals(object, object) object.GetHashCode() object.MemberwiseClone() object.ReferenceEquals(object, object) Constructors GotrueException(string?) Something with wrong with Gotrue / Auth public GotrueException(string? message) Parameters message string Short description of the error source GotrueException(string?, Reason) Something with wrong with Gotrue / Auth public GotrueException(string? message, FailureHint.Reason reason) Parameters message string Short description of the error source reason FailureHint.Reason Best effort attempt to detect the reason for the failure GotrueException(string, Reason, Exception?) Something with wrong with Gotrue / Auth public GotrueException(string message, FailureHint.Reason reason, Exception? innerException) Parameters message string Short description of the error source reason FailureHint.Reason Assigned reason innerException Exception GotrueException(string?, Exception?) Something with wrong with Gotrue / Auth public GotrueException(string? message, Exception? innerException) Parameters message string Short description of the error source innerException Exception The underlying exception Properties Content The content of the HTTP response from the server public string? Content { get; } Property Value string Reason Best guess at what caused the error from the server, see FailureHint.Reason public FailureHint.Reason Reason { get; } Property Value FailureHint.Reason Response The HTTP response from the server public HttpResponseMessage? Response { get; } Property Value HttpResponseMessage StatusCode The HTTP status code from the server public int StatusCode { get; } Property Value int Methods AddReason() Adds the best-effort reason for the failure public void AddReason()"
  },
  "api/Supabase.Gotrue.Exceptions.html": {
    "href": "api/Supabase.Gotrue.Exceptions.html",
    "title": "Namespace Supabase.Gotrue.Exceptions | gotrue-csharp",
    "keywords": "Namespace Supabase.Gotrue.Exceptions Classes FailureHint Maps Supabase server errors to hints based on the status code and the contents of the error message. GotrueException Errors from the GoTrue server are wrapped by this exception Enums FailureHint.Reason Best effort guess at why the exception was thrown."
  },
  "api/Supabase.Gotrue.GenerateLinkEmailChangeCurrentOptions.html": {
    "href": "api/Supabase.Gotrue.GenerateLinkEmailChangeCurrentOptions.html",
    "title": "Class GenerateLinkEmailChangeCurrentOptions | gotrue-csharp",
    "keywords": "Class GenerateLinkEmailChangeCurrentOptions Namespace Supabase.Gotrue Assembly Supabase.Gotrue.dll Shortcut options for EmailChangeCurrent public class GenerateLinkEmailChangeCurrentOptions : GenerateLinkOptions Inheritance object GenerateLinkOptions GenerateLinkEmailChangeCurrentOptions Inherited Members GenerateLinkOptions.Type GenerateLinkOptions.Email GenerateLinkOptions.Password GenerateLinkOptions.NewEmail GenerateLinkOptions.Data GenerateLinkOptions.RedirectTo object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors GenerateLinkEmailChangeCurrentOptions(string, string) Constructs options for EmailChangeCurrent public GenerateLinkEmailChangeCurrentOptions(string email, string newEmail) Parameters email string newEmail string"
  },
  "api/Supabase.Gotrue.GenerateLinkEmailChangeNewOptions.html": {
    "href": "api/Supabase.Gotrue.GenerateLinkEmailChangeNewOptions.html",
    "title": "Class GenerateLinkEmailChangeNewOptions | gotrue-csharp",
    "keywords": "Class GenerateLinkEmailChangeNewOptions Namespace Supabase.Gotrue Assembly Supabase.Gotrue.dll Shortcut options for EmailChangeNew public class GenerateLinkEmailChangeNewOptions : GenerateLinkOptions Inheritance object GenerateLinkOptions GenerateLinkEmailChangeNewOptions Inherited Members GenerateLinkOptions.Type GenerateLinkOptions.Email GenerateLinkOptions.Password GenerateLinkOptions.NewEmail GenerateLinkOptions.Data GenerateLinkOptions.RedirectTo object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors GenerateLinkEmailChangeNewOptions(string, string) Constructs options for EmailChangeNew public GenerateLinkEmailChangeNewOptions(string email, string newEmail) Parameters email string newEmail string"
  },
  "api/Supabase.Gotrue.GenerateLinkOptions.LinkType.html": {
    "href": "api/Supabase.Gotrue.GenerateLinkOptions.LinkType.html",
    "title": "Enum GenerateLinkOptions.LinkType | gotrue-csharp",
    "keywords": "Enum GenerateLinkOptions.LinkType Namespace Supabase.Gotrue Assembly Supabase.Gotrue.dll Mapping of link types that can be generated. public enum GenerateLinkOptions.LinkType Fields [MapTo(\"email_change_current\", null)] EmailChangeCurrent = 4 Generate an email change link to be sent to the current email address. [MapTo(\"email_change_new\", null)] EmailChangeNew = 5 Generate an email change link to be sent to the new email address. [MapTo(\"invite\", null)] Invite = 1 Generate an invite link. [MapTo(\"magiclink\", null)] MagicLink = 2 Generate a magic link. [MapTo(\"recovery\", null)] Recovery = 3 Generate a recovery link. [MapTo(\"signup\", null)] SignUp = 0 Generate a signup link."
  },
  "api/Supabase.Gotrue.GenerateLinkOptions.html": {
    "href": "api/Supabase.Gotrue.GenerateLinkOptions.html",
    "title": "Class GenerateLinkOptions | gotrue-csharp",
    "keywords": "Class GenerateLinkOptions Namespace Supabase.Gotrue Assembly Supabase.Gotrue.dll Options for Generating an Email Link public class GenerateLinkOptions Inheritance object GenerateLinkOptions Derived GenerateLinkEmailChangeCurrentOptions GenerateLinkEmailChangeNewOptions GenerateLinkSignupOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors GenerateLinkOptions(LinkType, string) Constructs options, additional properties may need to be assigned depending on GenerateLinkOptions.LinkType NewEmail is required for EmailChangeCurrent and EmailChangeNew Password is required for SignUp Data is optional for SignUp public GenerateLinkOptions(GenerateLinkOptions.LinkType linkType, string email) Parameters linkType GenerateLinkOptions.LinkType email string Properties Data A custom data object to store the user's metadata. This maps to the auth.users.user_metadata column. The data should be a JSON encodable object that includes user-specific info, such as their first and last name. [JsonProperty(\"data\", NullValueHandling = NullValueHandling.Ignore)] public Dictionary<string, object>? Data { get; set; } Property Value Dictionary<string, object> Email The User's Email [JsonProperty(\"email\", NullValueHandling = NullValueHandling.Ignore)] public string Email { get; } Property Value string NewEmail The user's new email. Only required if type is 'email_change_current' or 'email_change_new'. [JsonProperty(\"new_email\", NullValueHandling = NullValueHandling.Ignore)] public string? NewEmail { get; set; } Property Value string Password Only required if generating a signup link. [JsonProperty(\"password\", NullValueHandling = NullValueHandling.Ignore)] public string? Password { get; set; } Property Value string RedirectTo The URL which will be appended to the email link generated. [JsonIgnore] public string? RedirectTo { get; set; } Property Value string Type The type of link being generated [JsonProperty(\"type\", NullValueHandling = NullValueHandling.Ignore)] public string Type { get; } Property Value string"
  },
  "api/Supabase.Gotrue.GenerateLinkSignupOptions.html": {
    "href": "api/Supabase.Gotrue.GenerateLinkSignupOptions.html",
    "title": "Class GenerateLinkSignupOptions | gotrue-csharp",
    "keywords": "Class GenerateLinkSignupOptions Namespace Supabase.Gotrue Assembly Supabase.Gotrue.dll Shortcut options for SignUp public class GenerateLinkSignupOptions : GenerateLinkOptions Inheritance object GenerateLinkOptions GenerateLinkSignupOptions Inherited Members GenerateLinkOptions.Type GenerateLinkOptions.Email GenerateLinkOptions.Password GenerateLinkOptions.NewEmail GenerateLinkOptions.Data GenerateLinkOptions.RedirectTo object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors GenerateLinkSignupOptions(string, string) Constructs options for SignUp public GenerateLinkSignupOptions(string email, string password) Parameters email string password string Remarks Data is optional"
  },
  "api/Supabase.Gotrue.Helpers.html": {
    "href": "api/Supabase.Gotrue.Helpers.html",
    "title": "Class Helpers | gotrue-csharp",
    "keywords": "Class Helpers Namespace Supabase.Gotrue Assembly Supabase.Gotrue.dll Utility methods to assist with flow. Includes nonce generation and verification. public static class Helpers Inheritance object Helpers Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods GenerateNonce() Generates a nonce (code verifier) Used with PKCE flow and Apple/Google Sign in. Paired with GeneratePKCENonceVerifier(string) Sourced from: https://stackoverflow.com/a/65220376/3629438 public static string GenerateNonce() Returns string GeneratePKCENonceVerifier(string) Generates a PKCE SHA256 code challenge given a nonce (code verifier) Paired with GenerateNonce() Sourced from: https://stackoverflow.com/a/65220376/3629438 public static string GeneratePKCENonceVerifier(string codeVerifier) Parameters codeVerifier string Returns string GenerateSHA256NonceFromRawNonce(string) Generates a SHA256 nonce given a rawNonce, used Apple/Google Sign in. public static string GenerateSHA256NonceFromRawNonce(string rawNonce) Parameters rawNonce string Returns string"
  },
  "api/Supabase.Gotrue.Interfaces.IGotrueAdminClient-1.html": {
    "href": "api/Supabase.Gotrue.Interfaces.IGotrueAdminClient-1.html",
    "title": "Interface IGotrueAdminClient<TUser> | gotrue-csharp",
    "keywords": "Interface IGotrueAdminClient<TUser> Namespace Supabase.Gotrue.Interfaces Assembly Supabase.Gotrue.dll Interface for the Gotrue Admin Client (auth). public interface IGotrueAdminClient<TUser> : IGettableHeaders where TUser : User Type Parameters TUser Inherited Members IGettableHeaders.GetHeaders Methods CreateUser(AdminUserAttributes) Creates a user using the admin key (not the anonymous key). Used in trusted server environments, not client apps. Task<TUser?> CreateUser(AdminUserAttributes attributes) Parameters attributes AdminUserAttributes Returns Task<TUser> CreateUser(string, string, AdminUserAttributes?) Creates a user using the admin key (not the anonymous key). Used in trusted server environments, not client apps. Task<TUser?> CreateUser(string email, string password, AdminUserAttributes? attributes = null) Parameters email string password string attributes AdminUserAttributes Returns Task<TUser> DeleteFactor(MfaAdminDeleteFactorParams) Deletes a factor on a user. This will log the user out of all active sessions if the deleted factor was verified. Task<MfaAdminDeleteFactorResponse?> DeleteFactor(MfaAdminDeleteFactorParams deleteFactorParams) Parameters deleteFactorParams MfaAdminDeleteFactorParams Returns Task<MfaAdminDeleteFactorResponse> A MfaAdminDeleteFactorResponse containing the deleted factor id. DeleteUser(string) Creates a user using the admin key (not the anonymous key). Used in trusted server environments, not client apps. Task<bool> DeleteUser(string uid) Parameters uid string Returns Task<bool> GenerateLink(GenerateLinkOptions) Generates email links and OTPs to be sent via a custom email provider. Task<GenerateLinkResponse?> GenerateLink(GenerateLinkOptions options) Parameters options GenerateLinkOptions Options for this call. Password is required for SignUp, Data is an optional parameter for SignUp. Returns Task<GenerateLinkResponse> GetUser(string) Gets a user from a user's JWT. This is using the GoTrue server to validate a user's JWT. Task<TUser?> GetUser(string jwt) Parameters jwt string Returns Task<TUser> GetUserById(string) Gets a user by ID from the server using the admin key (not the anonymous key). Task<TUser?> GetUserById(string userId) Parameters userId string Returns Task<TUser> InviteUserByEmail(string, InviteUserByEmailOptions?) Sends an email to the user. Task<bool> InviteUserByEmail(string email, InviteUserByEmailOptions? options = null) Parameters email string options InviteUserByEmailOptions Returns Task<bool> ListFactors(MfaAdminListFactorsParams) Lists all factors associated to a specific user. Task<MfaAdminListFactorsResponse?> ListFactors(MfaAdminListFactorsParams listFactorsParams) Parameters listFactorsParams MfaAdminListFactorsParams Returns Task<MfaAdminListFactorsResponse> A list of Factor that this user has enabled. ListUsers(string?, string?, SortOrder, int?, int?) Lists users Task<UserList<TUser>?> ListUsers(string? filter = null, string? sortBy = null, Constants.SortOrder sortOrder = SortOrder.Descending, int? page = null, int? perPage = null) Parameters filter string A string for example part of the email sortBy string Snake case string of the given key, currently only created_at is supported sortOrder Constants.SortOrder asc or desc, if null desc is used page int? page to show for pagination perPage int? items per page for pagination Returns Task<UserList<TUser>> Update(UserAttributes) Updates a User using the service key Task<User?> Update(UserAttributes attributes) Parameters attributes UserAttributes Returns Task<User> UpdateUserById(string, AdminUserAttributes) Update user by Id Task<User?> UpdateUserById(string userId, AdminUserAttributes userData) Parameters userId string userData AdminUserAttributes Returns Task<User>"
  },
  "api/Supabase.Gotrue.Interfaces.IGotrueApi-2.html": {
    "href": "api/Supabase.Gotrue.Interfaces.IGotrueApi-2.html",
    "title": "Interface IGotrueApi<TUser, TSession> | gotrue-csharp",
    "keywords": "Interface IGotrueApi<TUser, TSession> Namespace Supabase.Gotrue.Interfaces Assembly Supabase.Gotrue.dll public interface IGotrueApi<TUser, TSession> : IGettableHeaders where TUser : User where TSession : Session Type Parameters TUser TSession Inherited Members IGettableHeaders.GetHeaders Methods Challenge(string, MfaChallengeParams) Task<MfaChallengeResponse?> Challenge(string jwt, MfaChallengeParams mfaChallengeParams) Parameters jwt string mfaChallengeParams MfaChallengeParams Returns Task<MfaChallengeResponse> CreateUser(string, AdminUserAttributes?) Task<TUser?> CreateUser(string jwt, AdminUserAttributes? attributes = null) Parameters jwt string attributes AdminUserAttributes Returns Task<TUser> DeleteFactor(string, MfaAdminDeleteFactorParams) Task<MfaAdminDeleteFactorResponse?> DeleteFactor(string jwt, MfaAdminDeleteFactorParams deleteFactorParams) Parameters jwt string deleteFactorParams MfaAdminDeleteFactorParams Returns Task<MfaAdminDeleteFactorResponse> DeleteUser(string, string) Task<BaseResponse> DeleteUser(string uid, string jwt) Parameters uid string jwt string Returns Task<BaseResponse> Enroll(string, MfaEnrollParams) Task<MfaEnrollResponse?> Enroll(string jwt, MfaEnrollParams mfaEnrollParams) Parameters jwt string mfaEnrollParams MfaEnrollParams Returns Task<MfaEnrollResponse> ExchangeCodeForSession(string, string) Task<Session?> ExchangeCodeForSession(string codeVerifier, string authCode) Parameters codeVerifier string authCode string Returns Task<Session> GenerateLink(string, GenerateLinkOptions) Task<BaseResponse> GenerateLink(string jwt, GenerateLinkOptions options) Parameters jwt string options GenerateLinkOptions Returns Task<BaseResponse> GetUriForProvider(Provider, SignInOptions?) ProviderAuthState GetUriForProvider(Constants.Provider provider, SignInOptions? options = null) Parameters provider Constants.Provider options SignInOptions Returns ProviderAuthState GetUser(string) Task<TUser?> GetUser(string jwt) Parameters jwt string Returns Task<TUser> GetUserById(string, string) Task<TUser?> GetUserById(string jwt, string userId) Parameters jwt string userId string Returns Task<TUser> InviteUserByEmail(string, string, InviteUserByEmailOptions?) Task<BaseResponse> InviteUserByEmail(string email, string jwt, InviteUserByEmailOptions? options = null) Parameters email string jwt string options InviteUserByEmailOptions Returns Task<BaseResponse> LinkIdentity(string, Provider, SignInOptions) Links an oauth identity to an existing user. This method requires the PKCE flow. Task<ProviderAuthState> LinkIdentity(string token, Constants.Provider provider, SignInOptions options) Parameters token string User's token provider Constants.Provider Provider to Link options SignInOptions Returns Task<ProviderAuthState> ListFactors(string, MfaAdminListFactorsParams) Task<BaseResponse> ListFactors(string jwt, MfaAdminListFactorsParams listFactorsParams) Parameters jwt string listFactorsParams MfaAdminListFactorsParams Returns Task<BaseResponse> ListUsers(string, string?, string?, SortOrder, int?, int?) Task<UserList<TUser>?> ListUsers(string jwt, string? filter = null, string? sortBy = null, Constants.SortOrder sortOrder = SortOrder.Descending, int? page = null, int? perPage = null) Parameters jwt string filter string sortBy string sortOrder Constants.SortOrder page int? perPage int? Returns Task<UserList<TUser>> Reauthenticate(string) Task<BaseResponse> Reauthenticate(string userJwt) Parameters userJwt string Returns Task<BaseResponse> RefreshAccessToken(string, string) Task<TSession?> RefreshAccessToken(string accessToken, string refreshToken) Parameters accessToken string refreshToken string Returns Task<TSession> ResetPasswordForEmail(ResetPasswordForEmailOptions) Task<ResetPasswordForEmailState> ResetPasswordForEmail(ResetPasswordForEmailOptions options) Parameters options ResetPasswordForEmailOptions Returns Task<ResetPasswordForEmailState> ResetPasswordForEmail(string) Task<BaseResponse> ResetPasswordForEmail(string email) Parameters email string Returns Task<BaseResponse> SendMagicLinkEmail(string, SignInOptions?) Task<BaseResponse> SendMagicLinkEmail(string email, SignInOptions? options = null) Parameters email string options SignInOptions Returns Task<BaseResponse> SendMobileOTP(string) Task<BaseResponse> SendMobileOTP(string phone) Parameters phone string Returns Task<BaseResponse> Settings() Task<Settings?> Settings() Returns Task<Settings> SignInAnonymously(SignInAnonymouslyOptions?) Task<TSession?> SignInAnonymously(SignInAnonymouslyOptions? options = null) Parameters options SignInAnonymouslyOptions Returns Task<TSession> SignInWithEmail(string, string) Task<TSession?> SignInWithEmail(string email, string password) Parameters email string password string Returns Task<TSession> SignInWithIdToken(Provider, string, string?, string?, string?) Task<TSession?> SignInWithIdToken(Constants.Provider provider, string idToken, string? accessToken = null, string? nonce = null, string? captchaToken = null) Parameters provider Constants.Provider idToken string accessToken string nonce string captchaToken string Returns Task<TSession> SignInWithOtp(SignInWithPasswordlessEmailOptions) Task<PasswordlessSignInState> SignInWithOtp(SignInWithPasswordlessEmailOptions options) Parameters options SignInWithPasswordlessEmailOptions Returns Task<PasswordlessSignInState> SignInWithOtp(SignInWithPasswordlessPhoneOptions) Task<PasswordlessSignInState> SignInWithOtp(SignInWithPasswordlessPhoneOptions options) Parameters options SignInWithPasswordlessPhoneOptions Returns Task<PasswordlessSignInState> SignInWithPhone(string, string) Task<TSession?> SignInWithPhone(string phone, string password) Parameters phone string password string Returns Task<TSession> SignInWithSSO(Guid, SignInWithSSOOptions?) Task<SSOResponse?> SignInWithSSO(Guid providerId, SignInWithSSOOptions? options = null) Parameters providerId Guid options SignInWithSSOOptions Returns Task<SSOResponse> SignInWithSSO(string, SignInWithSSOOptions?) Task<SSOResponse?> SignInWithSSO(string domain, SignInWithSSOOptions? options = null) Parameters domain string options SignInWithSSOOptions Returns Task<SSOResponse> SignOut(string, SignOutScope) Task<BaseResponse> SignOut(string jwt, Constants.SignOutScope scope = SignOutScope.Global) Parameters jwt string scope Constants.SignOutScope Returns Task<BaseResponse> SignUpWithEmail(string, string, SignUpOptions?) Task<TSession?> SignUpWithEmail(string email, string password, SignUpOptions? options = null) Parameters email string password string options SignUpOptions Returns Task<TSession> SignUpWithPhone(string, string, SignUpOptions?) Task<TSession?> SignUpWithPhone(string phone, string password, SignUpOptions? options = null) Parameters phone string password string options SignUpOptions Returns Task<TSession> Unenroll(string, MfaUnenrollParams) Task<MfaUnenrollResponse?> Unenroll(string jwt, MfaUnenrollParams mfaVerifyParams) Parameters jwt string mfaVerifyParams MfaUnenrollParams Returns Task<MfaUnenrollResponse> UnlinkIdentity(string, UserIdentity) Unlinks an identity from a user by deleting it. The user will no longer be able to sign in with that identity once it's unlinked. Task<bool> UnlinkIdentity(string token, UserIdentity userIdentity) Parameters token string User's token userIdentity UserIdentity Identity to be unlinked Returns Task<bool> UpdateUser(string, UserAttributes) Task<TUser?> UpdateUser(string jwt, UserAttributes attributes) Parameters jwt string attributes UserAttributes Returns Task<TUser> UpdateUserById(string, string, UserAttributes) Task<TUser?> UpdateUserById(string jwt, string userId, UserAttributes userData) Parameters jwt string userId string userData UserAttributes Returns Task<TUser> Verify(string, MfaVerifyParams) Task<MfaVerifyResponse?> Verify(string jwt, MfaVerifyParams mfaVerifyParams) Parameters jwt string mfaVerifyParams MfaVerifyParams Returns Task<MfaVerifyResponse> VerifyEmailOTP(string, string, EmailOtpType) Task<TSession?> VerifyEmailOTP(string email, string token, Constants.EmailOtpType type) Parameters email string token string type Constants.EmailOtpType Returns Task<TSession> VerifyMobileOTP(string, string, MobileOtpType) Task<TSession?> VerifyMobileOTP(string phone, string token, Constants.MobileOtpType type) Parameters phone string token string type Constants.MobileOtpType Returns Task<TSession> VerifyTokenHash(string, EmailOtpType) Task<TSession?> VerifyTokenHash(string tokenHash, Constants.EmailOtpType type) Parameters tokenHash string type Constants.EmailOtpType Returns Task<TSession>"
  },
  "api/Supabase.Gotrue.Interfaces.IGotrueClient-2.AuthEventHandler.html": {
    "href": "api/Supabase.Gotrue.Interfaces.IGotrueClient-2.AuthEventHandler.html",
    "title": "Delegate IGotrueClient<TUser, TSession>.AuthEventHandler | gotrue-csharp",
    "keywords": "Delegate IGotrueClient<TUser, TSession>.AuthEventHandler Namespace Supabase.Gotrue.Interfaces Assembly Supabase.Gotrue.dll The method that is called when there is a user state change. public delegate void IGotrueClient<TUser, TSession>.AuthEventHandler(IGotrueClient<TUser, TSession> sender, Constants.AuthState stateChanged) Parameters sender IGotrueClient<TUser, TSession> The method that is called when there is a user state change. stateChanged Constants.AuthState The method that is called when there is a user state change."
  },
  "api/Supabase.Gotrue.Interfaces.IGotrueClient-2.html": {
    "href": "api/Supabase.Gotrue.Interfaces.IGotrueClient-2.html",
    "title": "Interface IGotrueClient<TUser, TSession> | gotrue-csharp",
    "keywords": "Interface IGotrueClient<TUser, TSession> Namespace Supabase.Gotrue.Interfaces Assembly Supabase.Gotrue.dll GoTrue stateful Client. This class is best used as a long-lived singleton object in your application. You can attach listeners to be notified of changes to the user log in state, a persistence system for sessions across application launches, and more. It includes a (optional, on by default) background thread that runs to refresh the user's session token. Check out the test suite for examples of use. public interface IGotrueClient<TUser, TSession> : IGettableHeaders where TUser : User where TSession : Session Type Parameters TUser TSession Inherited Members IGettableHeaders.GetHeaders Examples var client = new Supabase.Gotrue.Client(options); var user = await client.SignIn(\"user@email.com\", \"fancyPassword\"); Properties CurrentSession The current Session as managed by this client. Does not refresh tokens or have any other side effects. You probably don't want to directly make changes to this object - you'll want to use other methods on this class to make changes. TSession? CurrentSession { get; } Property Value TSession CurrentUser The currently logged in User. This is a local cache of the current session User. To persist modifications to the User you'll want to use other methods. Update(UserAttributes)> TUser? CurrentUser { get; } Property Value TUser Online Indicates if the client should be considered online or offline. In a server environment, this client would likely always be online. On a mobile client, you will want to pair this with a network implementation to turn this on and off as the device goes online and offline. bool Online { get; set; } Property Value bool Options Returns the client options. ClientOptions Options { get; } Property Value ClientOptions Methods AddDebugListener(Action<string, Exception?>) Add a listener to get errors that occur outside of a typical Exception flow. In particular, this is used to get errors and messages from the background thread that automatically manages refreshing the user's token. void AddDebugListener(Action<string, Exception?> listener) Parameters listener Action<string, Exception> Callback method for debug messages AddStateChangedListener(AuthEventHandler) Adds a listener to be notified when the user state changes (e.g. the user logs in, logs out, the token is refreshed, etc). Constants.AuthState void AddStateChangedListener(IGotrueClient<TUser, TSession>.AuthEventHandler authEventHandler) Parameters authEventHandler IGotrueClient<TUser, TSession>.AuthEventHandler Challenge(MfaChallengeParams) Prepares a challenge used to verify that a user has access to a MFA factor. Task<MfaChallengeResponse?> Challenge(MfaChallengeParams mfaChallengeParams) Parameters mfaChallengeParams MfaChallengeParams Returns Task<MfaChallengeResponse> ChallengeAndVerify(MfaChallengeAndVerifyParams) Helper method which creates a challenge and immediately uses the given code to verify against it thereafter. The verification code is provided by the user by entering a code seen in their authenticator app. Task<Session?> ChallengeAndVerify(MfaChallengeAndVerifyParams mfaChallengeAndVerifyParams) Parameters mfaChallengeAndVerifyParams MfaChallengeAndVerifyParams Returns Task<Session> ClearStateChangedListeners() Clears all of the listeners from receiving event state changes. WARNING: The persistence handler and refresh token thread are installed as state change listeners. Clearing the listeners will also delete these handlers. void ClearStateChangedListeners() Debug(string, Exception?) Posts messages and exceptions to the debug listener. This is particularly useful for sorting out issues with the refresh token background thread. void Debug(string message, Exception? e = null) Parameters message string e Exception Enroll(MfaEnrollParams) Starts the enrollment process for a new Multi-Factor Authentication (MFA) factor. This method creates a new unverified factor. To verify a factor, present the QR code or secret to the user and ask them to add it to their authenticator app. The user has to enter the code from their authenticator app to verify it. Upon verifying a factor, all other sessions are logged out and the current session's authenticator level is promoted to aal2. Task<MfaEnrollResponse?> Enroll(MfaEnrollParams mfaEnrollParams) Parameters mfaEnrollParams MfaEnrollParams Returns Task<MfaEnrollResponse> ExchangeCodeForSession(string, string) Logs in an existing user via a third-party provider. Task<TSession?> ExchangeCodeForSession(string codeVerifier, string authCode) Parameters codeVerifier string authCode string Returns Task<TSession> GetAuthenticatorAssuranceLevel() Returns the Authenticator Assurance Level (AAL) for the active session. aal1 (or null) means that the user's identity has been verified only with a conventional login (email+password, OTP, magic link, social login, etc.). aal2 means that the user's identity has been verified both with a conventional login and at least one MFA factor. Although this method returns a promise, it's fairly quick (microseconds) and rarely uses the network. You can use this to check whether the current user needs to be shown a screen to verify their MFA factors. Task<MfaGetAuthenticatorAssuranceLevelResponse?> GetAuthenticatorAssuranceLevel() Returns Task<MfaGetAuthenticatorAssuranceLevelResponse> GetSessionFromUrl(Uri, bool) Converts a URL to a session. For client apps, this probably requires setting up URL handlers. Task<TSession?> GetSessionFromUrl(Uri uri, bool storeSession = true) Parameters uri Uri storeSession bool Returns Task<TSession> GetUser(string) Get User details by JWT. Can be used to validate a JWT. Task<TUser?> GetUser(string jwt) Parameters jwt string A valid JWT. Must be a JWT that originates from a user. Returns Task<TUser> LinkIdentity(Provider, SignInOptions) Links an oauth identity to an existing user. This method requires the PKCE flow. Task<ProviderAuthState> LinkIdentity(Constants.Provider provider, SignInOptions options) Parameters provider Constants.Provider Provider to Link options SignInOptions Returns Task<ProviderAuthState> ListFactors() Returns the list of MFA factors enabled for this user Task<MfaListFactorsResponse?> ListFactors() Returns Task<MfaListFactorsResponse> LoadSession() Loads the session from the persistence layer. void LoadSession() NotifyAuthStateChange(AuthState) Notifies all listeners that the current user auth state has changed. This is mainly used internally to fire notifications - most client applications won't need this. void NotifyAuthStateChange(Constants.AuthState stateChanged) Parameters stateChanged Constants.AuthState Reauthenticate() Used for re-authenticating a user in password changes. See: https://github.com/supabase/gotrue#get-reauthenticate Task<bool> Reauthenticate() Returns Task<bool> Exceptions GotrueException RefreshSession() Refreshes the currently logged in User's Session. Task<TSession?> RefreshSession() Returns Task<TSession> RefreshToken() Refreshes a Token using the current session. Task RefreshToken() Returns Task RemoveStateChangedListener(AuthEventHandler) Removes a specified listener from event state changes. void RemoveStateChangedListener(IGotrueClient<TUser, TSession>.AuthEventHandler authEventHandler) Parameters authEventHandler IGotrueClient<TUser, TSession>.AuthEventHandler ResetPasswordForEmail(ResetPasswordForEmailOptions) Sends a password reset request to an email address. Supports the PKCE Flow (the verifier from ResetPasswordForEmailState will be combined with ExchangeCodeForSession(string, string) in response) Task<ResetPasswordForEmailState> ResetPasswordForEmail(ResetPasswordForEmailOptions options) Parameters options ResetPasswordForEmailOptions Returns Task<ResetPasswordForEmailState> ResetPasswordForEmail(string) Sends a reset request to an email address. Task<bool> ResetPasswordForEmail(string email) Parameters email string Returns Task<bool> RetrieveSessionAsync() Typically called as part of the startup process for the client. This will take the currently loaded session (e.g. from a persistence implementation) and if possible attempt to refresh it. If the loaded session is expired or invalid, it will log the user out. Task<TSession?> RetrieveSessionAsync() Returns Task<TSession> SendMagicLink(string, SignInOptions?) Sends a Magic email login link to the specified email. Most of the interesting configuration for this flow is done in the Supabase/GoTrue admin panel. Task<bool> SendMagicLink(string email, SignInOptions? options = null) Parameters email string options SignInOptions Returns Task<bool> SetPersistence(IGotrueSessionPersistence<TSession>) Sets the persistence implementation for the client (e.g. file system, local storage, etc). void SetPersistence(IGotrueSessionPersistence<TSession> persistence) Parameters persistence IGotrueSessionPersistence<TSession> SetSession(string, string, bool) Sets a new session given a user's access token and their refresh token. Will destroy the current session (if existing) Raise a SignedOut event. Decode token 3a. If expired (or bool forceAccessTokenRefresh set), force an access token refresh. 3b. If not expired, set the CurrentSession and retrieve CurrentUser from the server using the accessToken. Raise a `SignedIn event if successful. Task<TSession> SetSession(string accessToken, string refreshToken, bool forceAccessTokenRefresh = false) Parameters accessToken string refreshToken string forceAccessTokenRefresh bool Returns Task<TSession> Exceptions GotrueException Raised when token combination is invalid. Settings() Retrieves the settings from the server Task<Settings?> Settings() Returns Task<Settings> Shutdown() Let all of the listeners know that the stateless client is being shutdown. In particular, the background thread that is used to refresh the token is stopped. void Shutdown() SignIn(Provider, SignInOptions?) Retrieves a ProviderAuthState to redirect to for signing in with a Constants.Provider. This will likely be paired with a PKCE flow (set in SignInOptions) - after redirecting the user to the flow, you should pair with ExchangeCodeForSession(string, string) Task<ProviderAuthState> SignIn(Constants.Provider provider, SignInOptions? options = null) Parameters provider Constants.Provider options SignInOptions Returns Task<ProviderAuthState> SignIn(SignInType, string, string?, string?) Log in an existing user, or login via a third-party provider. Task<TSession?> SignIn(Constants.SignInType type, string identifierOrToken, string? password = null, string? scopes = null) Parameters type Constants.SignInType Type of Credentials being passed identifierOrToken string An email, phone, or RefreshToken password string Password to account (optional if RefreshToken) scopes string A space-separated list of scopes granted to the OAuth application. Returns Task<TSession> SignIn(string, SignInOptions?) Sends a magic link login email to the specified email. Task<bool> SignIn(string email, SignInOptions? options = null) Parameters email string options SignInOptions Returns Task<bool> SignIn(string, string) Signs in a User. Task<TSession?> SignIn(string email, string password) Parameters email string password string Returns Task<TSession> SignInAnonymously(SignInAnonymouslyOptions?) Creates a new anonymous user. Task<TSession?> SignInAnonymously(SignInAnonymouslyOptions? options = null) Parameters options SignInAnonymouslyOptions Returns Task<TSession> A session where the is_anonymous claim in the access token JWT set to true SignInWithIdToken(Provider, string, string?, string?, string?) Allows signing in with an ID token issued by certain supported providers. The [idToken] is verified for validity and a new session is established. This method of signing in only supports [Provider.Google] or [Provider.Apple]. Task<TSession?> SignInWithIdToken(Constants.Provider provider, string idToken, string? accessToken = null, string? nonce = null, string? captchaToken = null) Parameters provider Constants.Provider Provider name or OIDC iss value identifying which provider should be used to verify the provided token. Supported names: google, apple, azure, facebook idToken string OIDC ID token issued by the specified provider. The iss claim in the ID token must match the supplied provider. Some ID tokens contain an at_hash which require that you provide an access_token value to be accepted properly. If the token contains a nonce claim you must supply the nonce used to obtain the ID token. accessToken string If the ID token contains an at_hash claim, then the hash of this value is compared to the value in the ID token. nonce string If the ID token contains a nonce claim, then the hash of this value is compared to the value in the ID token. captchaToken string Verification token received when the user completes the captcha on the site. Returns Task<TSession> Remarks Calling this method will eliminate the current session (if any). SignInWithOtp(SignInWithPasswordlessEmailOptions) Log in a user using magiclink or a one-time password (OTP). If the {{ .ConfirmationURL }} variable is specified in the email template, a magiclink will be sent. If the {{ .Token }} variable is specified in the email template, an OTP will be sent. If you're using phone sign-ins, only an OTP will be sent. You won't be able to send a magiclink for phone sign-ins. Be aware that you may get back an error message that will not distinguish between the cases where the account does not exist or, that the account can only be accessed via social login. Do note that you will need to configure a Whatsapp sender on Twilio if you are using phone sign in with the 'whatsapp' channel. The whatsapp channel is not supported on other providers at this time. Task<PasswordlessSignInState> SignInWithOtp(SignInWithPasswordlessEmailOptions options) Parameters options SignInWithPasswordlessEmailOptions Returns Task<PasswordlessSignInState> Remarks Calling this method will wipe out the current session (if any) SignInWithOtp(SignInWithPasswordlessPhoneOptions) Log in a user using magiclink or a one-time password (OTP). If the {{ .ConfirmationURL }} variable is specified in the email template, a magiclink will be sent. If the {{ .Token }} variable is specified in the email template, an OTP will be sent. If you're using phone sign-ins, only an OTP will be sent. You won't be able to send a magiclink for phone sign-ins. Be aware that you may get back an error message that will not distinguish between the cases where the account does not exist or, that the account can only be accessed via social login. Do note that you will need to configure a Whatsapp sender on Twilio if you are using phone sign in with the 'whatsapp' channel. The whatsapp channel is not supported on other providers at this time. Task<PasswordlessSignInState> SignInWithOtp(SignInWithPasswordlessPhoneOptions options) Parameters options SignInWithPasswordlessPhoneOptions Returns Task<PasswordlessSignInState> Remarks Calling this method will wipe out the current session (if any) SignInWithPassword(string, string) Log in an existing user with an email and password or phone and password. Task<TSession?> SignInWithPassword(string email, string password) Parameters email string password string Returns Task<TSession> SignInWithSSO(Guid, SignInWithSSOOptions?) Sign in using single sign on (SSO) as supported by supabase To use SSO you need to first set up the providers using the supabase CLI please follow the guide found here: https://supabase.com/docs/guides/auth/enterprise-sso/auth-sso-saml Task<SSOResponse?> SignInWithSSO(Guid providerId, SignInWithSSOOptions? options = null) Parameters providerId Guid The guid of the provider you wish to use, obtained from running supabase sso list from the CLI options SignInWithSSOOptions The redirect uri and captcha token, if any Returns Task<SSOResponse> The Uri returned from supabase auth that a user can use to sign in to their given SSO provider (okta, microsoft entra, gsuite ect...) SignInWithSSO(string, SignInWithSSOOptions?) Sign in using single sign on (SSO) as supported by supabase To use SSO you need to first set up the providers using the supabase CLI please follow the guide found here: https://supabase.com/docs/guides/auth/enterprise-sso/auth-sso-saml Task<SSOResponse?> SignInWithSSO(string domain, SignInWithSSOOptions? options = null) Parameters domain string Your organizations email domain to use for sign in, this domain needs to already be registered with supabase by running the CLI commands Example: google.com options SignInWithSSOOptions The redirect uri and captcha token, if any Returns Task<SSOResponse> The Uri returned from supabase auth that a user can use to sign in to their given SSO provider (okta, microsoft entra, gsuite ect...) SignOut(SignOutScope) Signs out and invalidates all sessions for a user. Task SignOut(Constants.SignOutScope scope = SignOutScope.Global) Parameters scope Constants.SignOutScope Determines which sessions should be invalidated. By default, it will invalidate all session for a user Returns Task SignUp(SignUpType, string, string, SignUpOptions?) Signs up a user Task<TSession?> SignUp(Constants.SignUpType type, string identifier, string password, SignUpOptions? options = null) Parameters type Constants.SignUpType identifier string password string options SignUpOptions Object containing redirectTo and optional user metadata (data) Returns Task<TSession> Remarks Calling this method will log out the current user session (if any). By default, the user needs to verify their email address before logging in. To turn this off, disable confirm email in your project. Confirm email determines if users need to confirm their email address after signing up. - If Confirm email is enabled, a user is returned but session is null. - If Confirm email is disabled, both a user and a session are returned. When the user confirms their email address, they are redirected to the SITE_URL by default. You can modify your SITE_URL or add additional redirect URLs in your project. If signUp() is called for an existing confirmed user: - If Confirm email is enabled in your project, an obfuscated/fake user object is returned. - If Confirm email is disabled, the error message, User already registered is returned. To fetch the currently logged-in user, refer to User. SignUp(string, string, SignUpOptions?) Signs up a user by email address. Task<TSession?> SignUp(string email, string password, SignUpOptions? options = null) Parameters email string password string options SignUpOptions Object containing redirectTo and optional user metadata (data) Returns Task<TSession> Remarks By default, the user needs to verify their email address before logging in. To turn this off, disable Confirm email in your project. Confirm email determines if users need to confirm their email address after signing up. - If Confirm email is enabled, a user is returned but session is null. - If Confirm email is disabled, both a user and a session are returned. When the user confirms their email address, they are redirected to the SITE_URL by default. You can modify your SITE_URL or add additional redirect URLs in your project. If signUp() is called for an existing confirmed user: - If Confirm email is enabled in your project, an obfuscated/fake user object is returned. - If Confirm email is disabled, the error message, User already registered is returned. To fetch the currently logged-in user, refer to User . Unenroll(MfaUnenrollParams) Unenroll removes a MFA factor. A user has to have an aal2 authenticator level in order to unenroll a verified factor. Task<MfaUnenrollResponse?> Unenroll(MfaUnenrollParams mfaUnenrollParams) Parameters mfaUnenrollParams MfaUnenrollParams Returns Task<MfaUnenrollResponse> UnlinkIdentity(UserIdentity) Unlinks an identity from a user by deleting it. The user will no longer be able to sign in with that identity once it's unlinked. Task<bool> UnlinkIdentity(UserIdentity userIdentity) Parameters userIdentity UserIdentity Identity to be unlinked Returns Task<bool> Update(UserAttributes) Updates a User. Task<TUser?> Update(UserAttributes attributes) Parameters attributes UserAttributes Returns Task<TUser> Verify(MfaVerifyParams) Verifies a code against a challenge. The verification code is provided by the user by entering a code seen in their authenticator app. Task<Session?> Verify(MfaVerifyParams mfaVerifyParams) Parameters mfaVerifyParams MfaVerifyParams Returns Task<Session> VerifyOTP(string, string, EmailOtpType) Log in a user give a user supplied OTP received via email. Task<TSession?> VerifyOTP(string email, string token, Constants.EmailOtpType type = EmailOtpType.MagicLink) Parameters email string token string type Constants.EmailOtpType Defaults to MagicLink Returns Task<TSession> VerifyOTP(string, string, MobileOtpType) Log in a user given a User supplied OTP received via mobile. Task<TSession?> VerifyOTP(string phone, string token, Constants.MobileOtpType type = MobileOtpType.SMS) Parameters phone string The user's phone number. token string Token sent to the user's phone. type Constants.MobileOtpType SMS or phone change Returns Task<TSession> VerifyTokenHash(string, EmailOtpType) Log in a user given the token hash used in an email confirmation link. Task<TSession?> VerifyTokenHash(string tokenHash, Constants.EmailOtpType type = EmailOtpType.Email) Parameters tokenHash string type Constants.EmailOtpType Returns Task<TSession>"
  },
  "api/Supabase.Gotrue.Interfaces.IGotruePersistenceListener-1.html": {
    "href": "api/Supabase.Gotrue.Interfaces.IGotruePersistenceListener-1.html",
    "title": "Interface IGotruePersistenceListener<TSession> | gotrue-csharp",
    "keywords": "Interface IGotruePersistenceListener<TSession> Namespace Supabase.Gotrue.Interfaces Assembly Supabase.Gotrue.dll Interface for a session persistence auth state handler. public interface IGotruePersistenceListener<TSession> where TSession : Session Type Parameters TSession Properties Persistence The persistence implementation for the client (e.g. file system, local storage, etc). IGotrueSessionPersistence<TSession> Persistence { get; } Property Value IGotrueSessionPersistence<TSession> Methods EventHandler(IGotrueClient<User, TSession>, AuthState) Routes auth state changes to the persistence implementation. void EventHandler(IGotrueClient<User, TSession> sender, Constants.AuthState stateChanged) Parameters sender IGotrueClient<User, TSession> stateChanged Constants.AuthState"
  },
  "api/Supabase.Gotrue.Interfaces.IGotrueSessionPersistence-1.html": {
    "href": "api/Supabase.Gotrue.Interfaces.IGotrueSessionPersistence-1.html",
    "title": "Interface IGotrueSessionPersistence<TSession> | gotrue-csharp",
    "keywords": "Interface IGotrueSessionPersistence<TSession> Namespace Supabase.Gotrue.Interfaces Assembly Supabase.Gotrue.dll Interface for session persistence. As a reminder, make sure you handle exceptions and other error conditions in your implementation. public interface IGotrueSessionPersistence<TSession> where TSession : Session Type Parameters TSession Methods DestroySession() Destroys the session in the persistence implementation. Usually this means deleting the session file or clearing local storage. void DestroySession() LoadSession() Loads the session from the persistence implementation. Returns null if there is no session. TSession? LoadSession() Returns TSession SaveSession(TSession) Saves the session to the persistence implementation. void SaveSession(TSession session) Parameters session TSession"
  },
  "api/Supabase.Gotrue.Interfaces.IGotrueStatelessClient-2.html": {
    "href": "api/Supabase.Gotrue.Interfaces.IGotrueStatelessClient-2.html",
    "title": "Interface IGotrueStatelessClient<TUser, TSession> | gotrue-csharp",
    "keywords": "Interface IGotrueStatelessClient<TUser, TSession> Namespace Supabase.Gotrue.Interfaces Assembly Supabase.Gotrue.dll A Stateless Gotrue Client public interface IGotrueStatelessClient<TUser, TSession> where TUser : User where TSession : Session Type Parameters TUser TSession Examples var options = new StatelessClientOptions { Url = \"https://mygotrueurl.com\" }; var user = await client.SignIn(\"user@email.com\", \"fancyPassword\", options); Methods Challenge(string, MfaChallengeParams, StatelessClientOptions) Prepares a challenge used to verify that a user has access to a MFA factor. Task<MfaChallengeResponse?> Challenge(string jwt, MfaChallengeParams mfaChallengeParams, StatelessClient.StatelessClientOptions options) Parameters jwt string mfaChallengeParams MfaChallengeParams options StatelessClient.StatelessClientOptions Returns Task<MfaChallengeResponse> ChallengeAndVerify(string, MfaChallengeAndVerifyParams, StatelessClientOptions) Helper method which creates a challenge and immediately uses the given code to verify against it thereafter. The verification code is provided by the user by entering a code seen in their authenticator app. Task<MfaVerifyResponse?> ChallengeAndVerify(string jwt, MfaChallengeAndVerifyParams mfaChallengeAndVerifyParams, StatelessClient.StatelessClientOptions options) Parameters jwt string mfaChallengeAndVerifyParams MfaChallengeAndVerifyParams options StatelessClient.StatelessClientOptions Returns Task<MfaVerifyResponse> CreateUser(string, StatelessClientOptions, AdminUserAttributes) Create a user Task<TUser?> CreateUser(string serviceRoleToken, StatelessClient.StatelessClientOptions options, AdminUserAttributes attributes) Parameters serviceRoleToken string A valid JWT. Must be a full-access API key (e.g. service_role key). options StatelessClient.StatelessClientOptions attributes AdminUserAttributes Returns Task<TUser> CreateUser(string, StatelessClientOptions, string, string, AdminUserAttributes?) Create a user Task<TUser?> CreateUser(string serviceRoleToken, StatelessClient.StatelessClientOptions options, string email, string password, AdminUserAttributes? attributes = null) Parameters serviceRoleToken string A valid JWT. Must be a full-access API key (e.g. service_role key). options StatelessClient.StatelessClientOptions email string password string attributes AdminUserAttributes Returns Task<TUser> DeleteUser(string, string, StatelessClientOptions) Deletes a User. Task<bool> DeleteUser(string uid, string serviceRoleToken, StatelessClient.StatelessClientOptions options) Parameters uid string serviceRoleToken string this token needs role 'supabase_admin' or 'service_role' options StatelessClient.StatelessClientOptions Returns Task<bool> Enroll(string, MfaEnrollParams, StatelessClientOptions) Starts the enrollment process for a new Multi-Factor Authentication (MFA) factor. This method creates a new unverified factor. To verify a factor, present the QR code or secret to the user and ask them to add it to their authenticator app. The user has to enter the code from their authenticator app to verify it. Upon verifying a factor, all other sessions are logged out and the current session's authenticator level is promoted to aal2. Task<MfaEnrollResponse?> Enroll(string jwt, MfaEnrollParams mfaEnrollParams, StatelessClient.StatelessClientOptions options) Parameters jwt string mfaEnrollParams MfaEnrollParams options StatelessClient.StatelessClientOptions Returns Task<MfaEnrollResponse> ExchangeCodeForSession(string, string, StatelessClientOptions) Logs in an existing user via a third-party provider. Task<TSession?> ExchangeCodeForSession(string codeVerifier, string authCode, StatelessClient.StatelessClientOptions options) Parameters codeVerifier string authCode string options StatelessClient.StatelessClientOptions Returns Task<TSession> GetApi(StatelessClientOptions) Initialize/retrieve the underlying API for this client IGotrueApi<TUser, TSession> GetApi(StatelessClient.StatelessClientOptions options) Parameters options StatelessClient.StatelessClientOptions Returns IGotrueApi<TUser, TSession> GetAuthenticatorAssuranceLevel(string, StatelessClientOptions) Returns the Authenticator Assurance Level (AAL) for the active session. aal1 (or null) means that the user's identity has been verified only with a conventional login (email+password, OTP, magic link, social login, etc.). aal2 means that the user's identity has been verified both with a conventional login and at least one MFA factor. Although this method returns a promise, it's fairly quick (microseconds) and rarely uses the network. You can use this to check whether the current user needs to be shown a screen to verify their MFA factors. Task<MfaGetAuthenticatorAssuranceLevelResponse?> GetAuthenticatorAssuranceLevel(string jwt, StatelessClient.StatelessClientOptions options) Parameters jwt string options StatelessClient.StatelessClientOptions Returns Task<MfaGetAuthenticatorAssuranceLevelResponse> GetSessionFromUrl(Uri, StatelessClientOptions) Parses a Session out of a Uri's Query parameters. Task<TSession?> GetSessionFromUrl(Uri uri, StatelessClient.StatelessClientOptions options) Parameters uri Uri options StatelessClient.StatelessClientOptions Returns Task<TSession> GetUser(string, StatelessClientOptions) Get User details by JWT. Can be used to validate a JWT. Task<TUser?> GetUser(string serviceRoleToken, StatelessClient.StatelessClientOptions options) Parameters serviceRoleToken string A valid JWT. Must be a JWT that originates from a user. options StatelessClient.StatelessClientOptions Returns Task<TUser> GetUserById(string, StatelessClientOptions, string) Get User details by Id Task<TUser?> GetUserById(string serviceRoleToken, StatelessClient.StatelessClientOptions options, string userId) Parameters serviceRoleToken string A valid JWT. Must be a full-access API key (e.g. service_role key). options StatelessClient.StatelessClientOptions userId string Returns Task<TUser> InviteUserByEmail(string, string, StatelessClientOptions, InviteUserByEmailOptions?) Sends an invite email link to the specified email. Task<bool> InviteUserByEmail(string email, string serviceRoleToken, StatelessClient.StatelessClientOptions options, InviteUserByEmailOptions? inviteOptions = null) Parameters email string serviceRoleToken string this token needs role 'supabase_admin' or 'service_role' options StatelessClient.StatelessClientOptions inviteOptions InviteUserByEmailOptions Returns Task<bool> ListFactors(string, StatelessClientOptions) Returns the list of MFA factors enabled for this user Task<MfaListFactorsResponse?> ListFactors(string jwt, StatelessClient.StatelessClientOptions options) Parameters jwt string options StatelessClient.StatelessClientOptions Returns Task<MfaListFactorsResponse> ListUsers(string, StatelessClientOptions, string?, string?, SortOrder, int?, int?) Lists users Task<UserList<User>?> ListUsers(string serviceRoleToken, StatelessClient.StatelessClientOptions options, string? filter = null, string? sortBy = null, Constants.SortOrder sortOrder = SortOrder.Descending, int? page = null, int? perPage = null) Parameters serviceRoleToken string A valid JWT. Must be a full-access API key (e.g. service_role key). options StatelessClient.StatelessClientOptions filter string A string for example part of the email sortBy string Snake case string of the given key, currently only created_at is supported sortOrder Constants.SortOrder asc or desc, if null desc is used page int? page to show for pagination perPage int? items per page for pagination Returns Task<UserList<User>> RefreshToken(string, string, StatelessClientOptions) Refreshes a Token Task<TSession?> RefreshToken(string accessToken, string refreshToken, StatelessClient.StatelessClientOptions options) Parameters accessToken string refreshToken string options StatelessClient.StatelessClientOptions Returns Task<TSession> ResetPasswordForEmail(string, StatelessClientOptions) Sends a reset request to an email address. Task<bool> ResetPasswordForEmail(string email, StatelessClient.StatelessClientOptions options) Parameters email string options StatelessClient.StatelessClientOptions Returns Task<bool> Exceptions Exception SendMagicLink(string, StatelessClientOptions, SignInOptions?) Sends a Magic email login link to the specified email. Task<bool> SendMagicLink(string email, StatelessClient.StatelessClientOptions options, SignInOptions? signInOptions = null) Parameters email string options StatelessClient.StatelessClientOptions signInOptions SignInOptions Returns Task<bool> Settings(StatelessClientOptions) Retrieve the current settings for the Gotrue instance. Task<Settings?> Settings(StatelessClient.StatelessClientOptions options) Parameters options StatelessClient.StatelessClientOptions Returns Task<Settings> SignIn(Provider, StatelessClientOptions, SignInOptions?) Retrieves a Url to redirect to for signing in with a Constants.Provider. This method will need to be combined with GetSessionFromUrl(Uri, StatelessClientOptions) when the Application receives the Oauth Callback. ProviderAuthState SignIn(Constants.Provider provider, StatelessClient.StatelessClientOptions options, SignInOptions? signInOptions = null) Parameters provider Constants.Provider options StatelessClient.StatelessClientOptions signInOptions SignInOptions Returns ProviderAuthState Examples var client = Supabase.Gotrue.Client.Initialize(options); var url = client.SignIn(Provider.Github); // Do Redirect User // Example code Application.HasReceivedOauth += async (uri) => { var session = await client.GetSessionFromUri(uri, true); } SignIn(SignInType, string, string?, StatelessClientOptions?) Log in an existing user, or login via a third-party provider. Task<TSession?> SignIn(Constants.SignInType type, string identifierOrToken, string? password = null, StatelessClient.StatelessClientOptions? options = null) Parameters type Constants.SignInType Type of Credentials being passed identifierOrToken string An email, phone, or RefreshToken password string Password to account (optional if RefreshToken) options StatelessClient.StatelessClientOptions Returns Task<TSession> SignIn(string, StatelessClientOptions, SignInOptions?) Sends a Magic email login link to the specified email. Task<bool> SignIn(string email, StatelessClient.StatelessClientOptions options, SignInOptions? signInOptions = null) Parameters email string options StatelessClient.StatelessClientOptions signInOptions SignInOptions Returns Task<bool> SignIn(string, string, StatelessClientOptions) Signs in a User with an email address and password. Task<TSession?> SignIn(string email, string password, StatelessClient.StatelessClientOptions options) Parameters email string password string options StatelessClient.StatelessClientOptions Returns Task<TSession> SignOut(string, StatelessClientOptions) Logout a User This will revoke all refresh tokens for the user. JWT tokens will still be valid for stateless auth until they expire. Task<bool> SignOut(string accessToken, StatelessClient.StatelessClientOptions options) Parameters accessToken string options StatelessClient.StatelessClientOptions Returns Task<bool> SignUp(SignUpType, string, string, StatelessClientOptions, SignUpOptions?) Signs up a user Task<TSession?> SignUp(Constants.SignUpType type, string identifier, string password, StatelessClient.StatelessClientOptions options, SignUpOptions? signUpOptions = null) Parameters type Constants.SignUpType Type of signup identifier string Phone or Email password string options StatelessClient.StatelessClientOptions signUpOptions SignUpOptions Object containing redirectTo and optional user metadata (data) Returns Task<TSession> SignUp(string, string, StatelessClientOptions, SignUpOptions?) Signs up a user by email address Task<TSession?> SignUp(string email, string password, StatelessClient.StatelessClientOptions options, SignUpOptions? signUpOptions = null) Parameters email string password string options StatelessClient.StatelessClientOptions signUpOptions SignUpOptions Object containing redirectTo and optional user metadata (data) Returns Task<TSession> Unenroll(string, MfaUnenrollParams, StatelessClientOptions) Unenroll removes a MFA factor. A user has to have an aal2 authenticator level in order to unenroll a verified factor. Task<MfaUnenrollResponse?> Unenroll(string jwt, MfaUnenrollParams mfaUnenrollParams, StatelessClient.StatelessClientOptions options) Parameters jwt string mfaUnenrollParams MfaUnenrollParams options StatelessClient.StatelessClientOptions Returns Task<MfaUnenrollResponse> Update(string, UserAttributes, StatelessClientOptions) Updates a User's attributes Task<TUser?> Update(string accessToken, UserAttributes attributes, StatelessClient.StatelessClientOptions options) Parameters accessToken string attributes UserAttributes options StatelessClient.StatelessClientOptions Returns Task<TUser> UpdateUserById(string, StatelessClientOptions, string, AdminUserAttributes) Update user by Id Task<TUser?> UpdateUserById(string serviceRoleToken, StatelessClient.StatelessClientOptions options, string userId, AdminUserAttributes userData) Parameters serviceRoleToken string A valid JWT. Must be a full-access API key (e.g. service_role key). options StatelessClient.StatelessClientOptions userId string userData AdminUserAttributes Returns Task<TUser> Verify(string, MfaVerifyParams, StatelessClientOptions) Verifies a code against a challenge. The verification code is provided by the user by entering a code seen in their authenticator app. Task<MfaVerifyResponse?> Verify(string jwt, MfaVerifyParams mfaVerifyParams, StatelessClient.StatelessClientOptions options) Parameters jwt string mfaVerifyParams MfaVerifyParams options StatelessClient.StatelessClientOptions Returns Task<MfaVerifyResponse> VerifyOTP(string, string, StatelessClientOptions, EmailOtpType) Log in a user give a user supplied OTP received via email. Task<TSession?> VerifyOTP(string email, string otpToken, StatelessClient.StatelessClientOptions options, Constants.EmailOtpType type = EmailOtpType.MagicLink) Parameters email string otpToken string options StatelessClient.StatelessClientOptions type Constants.EmailOtpType Returns Task<TSession> VerifyOTP(string, string, StatelessClientOptions, MobileOtpType) Log in a user given a User supplied OTP received via mobile. Task<TSession?> VerifyOTP(string phone, string otpToken, StatelessClient.StatelessClientOptions options, Constants.MobileOtpType type = MobileOtpType.SMS) Parameters phone string The user's phone number. otpToken string Token sent to the user's phone. options StatelessClient.StatelessClientOptions type Constants.MobileOtpType Returns Task<TSession> VerifyTokenHash(string, StatelessClientOptions, EmailOtpType) Log in a user given the token hash used in an email confirmation link. Task<TSession?> VerifyTokenHash(string tokenHash, StatelessClient.StatelessClientOptions options, Constants.EmailOtpType type = EmailOtpType.Email) Parameters tokenHash string options StatelessClient.StatelessClientOptions type Constants.EmailOtpType Returns Task<TSession>"
  },
  "api/Supabase.Gotrue.Interfaces.html": {
    "href": "api/Supabase.Gotrue.Interfaces.html",
    "title": "Namespace Supabase.Gotrue.Interfaces | gotrue-csharp",
    "keywords": "Namespace Supabase.Gotrue.Interfaces Interfaces IGotrueAdminClient<TUser> Interface for the Gotrue Admin Client (auth). IGotrueApi<TUser, TSession> IGotrueClient<TUser, TSession> GoTrue stateful Client. This class is best used as a long-lived singleton object in your application. You can attach listeners to be notified of changes to the user log in state, a persistence system for sessions across application launches, and more. It includes a (optional, on by default) background thread that runs to refresh the user's session token. Check out the test suite for examples of use. IGotruePersistenceListener<TSession> Interface for a session persistence auth state handler. IGotrueSessionPersistence<TSession> Interface for session persistence. As a reminder, make sure you handle exceptions and other error conditions in your implementation. IGotrueStatelessClient<TUser, TSession> A Stateless Gotrue Client Delegates IGotrueClient<TUser, TSession>.AuthEventHandler The method that is called when there is a user state change."
  },
  "api/Supabase.Gotrue.InviteUserByEmailOptions.html": {
    "href": "api/Supabase.Gotrue.InviteUserByEmailOptions.html",
    "title": "Class InviteUserByEmailOptions | gotrue-csharp",
    "keywords": "Class InviteUserByEmailOptions Namespace Supabase.Gotrue Assembly Supabase.Gotrue.dll A utility class that represents options for sending a User an Invitation public class InviteUserByEmailOptions Inheritance object InviteUserByEmailOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Data A custom data object to store additional metadata about the user. This maps to the auth.users.user_metadata column. public Dictionary<string, object>? Data { get; set; } Property Value Dictionary<string, object> RedirectTo The URL which will be appended to the email link sent to the user's email address. Once clicked the user will end up on this URL. public string? RedirectTo { get; set; } Property Value string"
  },
  "api/Supabase.Gotrue.Mfa.AmrEntry.html": {
    "href": "api/Supabase.Gotrue.Mfa.AmrEntry.html",
    "title": "Class AmrEntry | gotrue-csharp",
    "keywords": "Class AmrEntry Namespace Supabase.Gotrue.Mfa Assembly Supabase.Gotrue.dll public class AmrEntry Inheritance object AmrEntry Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Method Authentication method name. public string Method { get; set; } Property Value string Timestamp Timestamp when the method was successfully used. Represents number of seconds since 1st January 1970 (UNIX epoch) in UTC. public long Timestamp { get; set; } Property Value long"
  },
  "api/Supabase.Gotrue.Mfa.AuthenticatorAssuranceLevel.html": {
    "href": "api/Supabase.Gotrue.Mfa.AuthenticatorAssuranceLevel.html",
    "title": "Enum AuthenticatorAssuranceLevel | gotrue-csharp",
    "keywords": "Enum AuthenticatorAssuranceLevel Namespace Supabase.Gotrue.Mfa Assembly Supabase.Gotrue.dll public enum AuthenticatorAssuranceLevel Fields aal1 = 0 aal2 = 1"
  },
  "api/Supabase.Gotrue.Mfa.Factor.html": {
    "href": "api/Supabase.Gotrue.Mfa.Factor.html",
    "title": "Class Factor | gotrue-csharp",
    "keywords": "Class Factor Namespace Supabase.Gotrue.Mfa Assembly Supabase.Gotrue.dll public class Factor Inheritance object Factor Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties CreatedAt [JsonProperty(\"created_at\")] public DateTime CreatedAt { get; set; } Property Value DateTime FactorType [JsonProperty(\"factor_type\")] public string FactorType { get; set; } Property Value string FriendlyName [JsonProperty(\"friendly_name\")] public string? FriendlyName { get; set; } Property Value string Id [JsonProperty(\"id\")] public string Id { get; set; } Property Value string Status [JsonProperty(\"status\")] public string Status { get; set; } Property Value string UpdatedAt [JsonProperty(\"updated_at\")] public DateTime UpdatedAt { get; set; } Property Value DateTime"
  },
  "api/Supabase.Gotrue.Mfa.MfaAdminDeleteFactorParams.html": {
    "href": "api/Supabase.Gotrue.Mfa.MfaAdminDeleteFactorParams.html",
    "title": "Class MfaAdminDeleteFactorParams | gotrue-csharp",
    "keywords": "Class MfaAdminDeleteFactorParams Namespace Supabase.Gotrue.Mfa Assembly Supabase.Gotrue.dll public class MfaAdminDeleteFactorParams Inheritance object MfaAdminDeleteFactorParams Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Id public string Id { get; set; } Property Value string UserId public string UserId { get; set; } Property Value string"
  },
  "api/Supabase.Gotrue.Mfa.MfaAdminDeleteFactorResponse.html": {
    "href": "api/Supabase.Gotrue.Mfa.MfaAdminDeleteFactorResponse.html",
    "title": "Class MfaAdminDeleteFactorResponse | gotrue-csharp",
    "keywords": "Class MfaAdminDeleteFactorResponse Namespace Supabase.Gotrue.Mfa Assembly Supabase.Gotrue.dll public class MfaAdminDeleteFactorResponse Inheritance object MfaAdminDeleteFactorResponse Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Id [JsonPropertyName(\"id\")] public string Id { get; set; } Property Value string"
  },
  "api/Supabase.Gotrue.Mfa.MfaAdminListFactorsParams.html": {
    "href": "api/Supabase.Gotrue.Mfa.MfaAdminListFactorsParams.html",
    "title": "Class MfaAdminListFactorsParams | gotrue-csharp",
    "keywords": "Class MfaAdminListFactorsParams Namespace Supabase.Gotrue.Mfa Assembly Supabase.Gotrue.dll public class MfaAdminListFactorsParams Inheritance object MfaAdminListFactorsParams Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties UserId public string UserId { get; set; } Property Value string"
  },
  "api/Supabase.Gotrue.Mfa.MfaAdminListFactorsResponse.html": {
    "href": "api/Supabase.Gotrue.Mfa.MfaAdminListFactorsResponse.html",
    "title": "Class MfaAdminListFactorsResponse | gotrue-csharp",
    "keywords": "Class MfaAdminListFactorsResponse Namespace Supabase.Gotrue.Mfa Assembly Supabase.Gotrue.dll public class MfaAdminListFactorsResponse Inheritance object MfaAdminListFactorsResponse Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Factors public List<Factor> Factors { get; set; } Property Value List<Factor>"
  },
  "api/Supabase.Gotrue.Mfa.MfaChallengeAndVerifyParams.html": {
    "href": "api/Supabase.Gotrue.Mfa.MfaChallengeAndVerifyParams.html",
    "title": "Class MfaChallengeAndVerifyParams | gotrue-csharp",
    "keywords": "Class MfaChallengeAndVerifyParams Namespace Supabase.Gotrue.Mfa Assembly Supabase.Gotrue.dll public class MfaChallengeAndVerifyParams Inheritance object MfaChallengeAndVerifyParams Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Code public string Code { get; set; } Property Value string FactorId public string FactorId { get; set; } Property Value string"
  },
  "api/Supabase.Gotrue.Mfa.MfaChallengeParams.html": {
    "href": "api/Supabase.Gotrue.Mfa.MfaChallengeParams.html",
    "title": "Class MfaChallengeParams | gotrue-csharp",
    "keywords": "Class MfaChallengeParams Namespace Supabase.Gotrue.Mfa Assembly Supabase.Gotrue.dll public class MfaChallengeParams Inheritance object MfaChallengeParams Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties FactorId public string FactorId { get; set; } Property Value string"
  },
  "api/Supabase.Gotrue.Mfa.MfaChallengeResponse.html": {
    "href": "api/Supabase.Gotrue.Mfa.MfaChallengeResponse.html",
    "title": "Class MfaChallengeResponse | gotrue-csharp",
    "keywords": "Class MfaChallengeResponse Namespace Supabase.Gotrue.Mfa Assembly Supabase.Gotrue.dll public class MfaChallengeResponse Inheritance object MfaChallengeResponse Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties ExpiresAt [JsonProperty(\"expires_at\")] public long ExpiresAt { get; set; } Property Value long Id [JsonProperty(\"id\")] public string Id { get; set; } Property Value string"
  },
  "api/Supabase.Gotrue.Mfa.MfaEnrollParams.html": {
    "href": "api/Supabase.Gotrue.Mfa.MfaEnrollParams.html",
    "title": "Class MfaEnrollParams | gotrue-csharp",
    "keywords": "Class MfaEnrollParams Namespace Supabase.Gotrue.Mfa Assembly Supabase.Gotrue.dll public class MfaEnrollParams Inheritance object MfaEnrollParams Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties FactorType public string FactorType { get; set; } Property Value string FriendlyName public string? FriendlyName { get; set; } Property Value string Issuer public string? Issuer { get; set; } Property Value string"
  },
  "api/Supabase.Gotrue.Mfa.MfaEnrollResponse.html": {
    "href": "api/Supabase.Gotrue.Mfa.MfaEnrollResponse.html",
    "title": "Class MfaEnrollResponse | gotrue-csharp",
    "keywords": "Class MfaEnrollResponse Namespace Supabase.Gotrue.Mfa Assembly Supabase.Gotrue.dll public class MfaEnrollResponse Inheritance object MfaEnrollResponse Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties FriendlyName [JsonProperty(\"friendly_name\")] public string FriendlyName { get; set; } Property Value string Id [JsonProperty(\"id\")] public string Id { get; set; } Property Value string Totp [JsonProperty(\"totp\")] public TOTP Totp { get; set; } Property Value TOTP Type [JsonProperty(\"type\")] public string Type { get; set; } Property Value string"
  },
  "api/Supabase.Gotrue.Mfa.MfaGetAuthenticatorAssuranceLevelResponse.html": {
    "href": "api/Supabase.Gotrue.Mfa.MfaGetAuthenticatorAssuranceLevelResponse.html",
    "title": "Class MfaGetAuthenticatorAssuranceLevelResponse | gotrue-csharp",
    "keywords": "Class MfaGetAuthenticatorAssuranceLevelResponse Namespace Supabase.Gotrue.Mfa Assembly Supabase.Gotrue.dll public class MfaGetAuthenticatorAssuranceLevelResponse Inheritance object MfaGetAuthenticatorAssuranceLevelResponse Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties CurrentAuthenticationMethods public AmrEntry[] CurrentAuthenticationMethods { get; set; } Property Value AmrEntry[] CurrentLevel public AuthenticatorAssuranceLevel? CurrentLevel { get; set; } Property Value AuthenticatorAssuranceLevel? NextLevel public AuthenticatorAssuranceLevel? NextLevel { get; set; } Property Value AuthenticatorAssuranceLevel?"
  },
  "api/Supabase.Gotrue.Mfa.MfaListFactorsResponse.html": {
    "href": "api/Supabase.Gotrue.Mfa.MfaListFactorsResponse.html",
    "title": "Class MfaListFactorsResponse | gotrue-csharp",
    "keywords": "Class MfaListFactorsResponse Namespace Supabase.Gotrue.Mfa Assembly Supabase.Gotrue.dll public class MfaListFactorsResponse Inheritance object MfaListFactorsResponse Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties All public List<Factor> All { get; set; } Property Value List<Factor> Totp public List<Factor> Totp { get; set; } Property Value List<Factor>"
  },
  "api/Supabase.Gotrue.Mfa.MfaUnenrollParams.html": {
    "href": "api/Supabase.Gotrue.Mfa.MfaUnenrollParams.html",
    "title": "Class MfaUnenrollParams | gotrue-csharp",
    "keywords": "Class MfaUnenrollParams Namespace Supabase.Gotrue.Mfa Assembly Supabase.Gotrue.dll public class MfaUnenrollParams Inheritance object MfaUnenrollParams Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties FactorId public string FactorId { get; set; } Property Value string"
  },
  "api/Supabase.Gotrue.Mfa.MfaUnenrollResponse.html": {
    "href": "api/Supabase.Gotrue.Mfa.MfaUnenrollResponse.html",
    "title": "Class MfaUnenrollResponse | gotrue-csharp",
    "keywords": "Class MfaUnenrollResponse Namespace Supabase.Gotrue.Mfa Assembly Supabase.Gotrue.dll public class MfaUnenrollResponse Inheritance object MfaUnenrollResponse Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Id [JsonProperty(\"id\")] public string Id { get; set; } Property Value string"
  },
  "api/Supabase.Gotrue.Mfa.MfaVerifyParams.html": {
    "href": "api/Supabase.Gotrue.Mfa.MfaVerifyParams.html",
    "title": "Class MfaVerifyParams | gotrue-csharp",
    "keywords": "Class MfaVerifyParams Namespace Supabase.Gotrue.Mfa Assembly Supabase.Gotrue.dll public class MfaVerifyParams Inheritance object MfaVerifyParams Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties ChallengeId public string ChallengeId { get; set; } Property Value string Code public string Code { get; set; } Property Value string FactorId public string FactorId { get; set; } Property Value string"
  },
  "api/Supabase.Gotrue.Mfa.MfaVerifyResponse.html": {
    "href": "api/Supabase.Gotrue.Mfa.MfaVerifyResponse.html",
    "title": "Class MfaVerifyResponse | gotrue-csharp",
    "keywords": "Class MfaVerifyResponse Namespace Supabase.Gotrue.Mfa Assembly Supabase.Gotrue.dll public class MfaVerifyResponse Inheritance object MfaVerifyResponse Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties AccessToken [JsonProperty(\"access_token\")] public string AccessToken { get; set; } Property Value string ExpiresIn [JsonProperty(\"expires_in\")] public int ExpiresIn { get; set; } Property Value int RefreshToken [JsonProperty(\"refresh_token\")] public string RefreshToken { get; set; } Property Value string TokenType [JsonProperty(\"token_type\")] public string TokenType { get; set; } Property Value string User [JsonProperty(\"user\")] public User User { get; set; } Property Value User"
  },
  "api/Supabase.Gotrue.Mfa.TOTP.html": {
    "href": "api/Supabase.Gotrue.Mfa.TOTP.html",
    "title": "Class TOTP | gotrue-csharp",
    "keywords": "Class TOTP Namespace Supabase.Gotrue.Mfa Assembly Supabase.Gotrue.dll public class TOTP Inheritance object TOTP Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties QrCode [JsonProperty(\"qr_code\")] public string QrCode { get; set; } Property Value string Secret [JsonProperty(\"secret\")] public string Secret { get; set; } Property Value string Uri [JsonProperty(\"uri\")] public string Uri { get; set; } Property Value string"
  },
  "api/Supabase.Gotrue.Mfa.html": {
    "href": "api/Supabase.Gotrue.Mfa.html",
    "title": "Namespace Supabase.Gotrue.Mfa | gotrue-csharp",
    "keywords": "Namespace Supabase.Gotrue.Mfa Classes AmrEntry Factor MfaAdminDeleteFactorParams MfaAdminDeleteFactorResponse MfaAdminListFactorsParams MfaAdminListFactorsResponse MfaChallengeAndVerifyParams MfaChallengeParams MfaChallengeResponse MfaEnrollParams MfaEnrollResponse MfaGetAuthenticatorAssuranceLevelResponse MfaListFactorsResponse MfaUnenrollParams MfaUnenrollResponse MfaVerifyParams MfaVerifyResponse TOTP Enums AuthenticatorAssuranceLevel"
  },
  "api/Supabase.Gotrue.NetworkStatus.NetworkListener.html": {
    "href": "api/Supabase.Gotrue.NetworkStatus.NetworkListener.html",
    "title": "Delegate NetworkStatus.NetworkListener | gotrue-csharp",
    "keywords": "Delegate NetworkStatus.NetworkListener Namespace Supabase.Gotrue Assembly Supabase.Gotrue.dll A delegate for listening to network changes. public delegate void NetworkStatus.NetworkListener(bool isNetworkAvailable) Parameters isNetworkAvailable bool A delegate for listening to network changes."
  },
  "api/Supabase.Gotrue.NetworkStatus.html": {
    "href": "api/Supabase.Gotrue.NetworkStatus.html",
    "title": "Class NetworkStatus | gotrue-csharp",
    "keywords": "Class NetworkStatus Namespace Supabase.Gotrue Assembly Supabase.Gotrue.dll A Network status system to pair with the OnlineClient. https://learn.microsoft.com/en-us/dotnet/fundamentals/networking/network-info public class NetworkStatus Inheritance object NetworkStatus Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields Ready True if the network has been checked. public bool Ready Field Value bool Properties Client The Client that this network status system is attached to. public IGotrueClient<User, Session>? Client { get; set; } Property Value IGotrueClient<User, Session> Methods AddListener(NetworkListener) Adds a listener to the network status system. public void AddListener(NetworkStatus.NetworkListener listener) Parameters listener NetworkStatus.NetworkListener ~NetworkStatus() Removes the network status system checker from the OS. protected ~NetworkStatus() PingCheck(string) Pings the URL in the Options to check if the network is online. https://PROJECTID.supabase.co/auth/v1/settings public Task<bool> PingCheck(string url) Parameters url string Returns Task<bool> RemoveListener(NetworkListener) Removes a listener from the network status system. public void RemoveListener(NetworkStatus.NetworkListener listener) Parameters listener NetworkStatus.NetworkListener StartAsync(string) Starts the network status system. This will listen to the OS for network changes, and also does a ping check to confirm the current network status. public Task<bool> StartAsync(string url) Parameters url string Returns Task<bool>"
  },
  "api/Supabase.Gotrue.PasswordlessSignInState.html": {
    "href": "api/Supabase.Gotrue.PasswordlessSignInState.html",
    "title": "Class PasswordlessSignInState | gotrue-csharp",
    "keywords": "Class PasswordlessSignInState Namespace Supabase.Gotrue Assembly Supabase.Gotrue.dll A utility class that represents a successful response from a request to send a user Passwordless Sign In. public class PasswordlessSignInState Inheritance object PasswordlessSignInState Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties PKCEVerifier PKCE Verifier generated if using the PKCE flow type. public string? PKCEVerifier { get; set; } Property Value string"
  },
  "api/Supabase.Gotrue.PersistenceListener.html": {
    "href": "api/Supabase.Gotrue.PersistenceListener.html",
    "title": "Class PersistenceListener | gotrue-csharp",
    "keywords": "Class PersistenceListener Namespace Supabase.Gotrue Assembly Supabase.Gotrue.dll Manages the persistence of the Gotrue Session. You'll want to install a persistence listener to persist user sessions between app restarts. public class PersistenceListener : IGotruePersistenceListener<Session> Inheritance object PersistenceListener Implements IGotruePersistenceListener<Session> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors PersistenceListener(IGotrueSessionPersistence<Session>) Create a new persistence listener public PersistenceListener(IGotrueSessionPersistence<Session> persistence) Parameters persistence IGotrueSessionPersistence<Session> Properties Persistence The persistence implementation for the client (e.g. file system, local storage, etc). public IGotrueSessionPersistence<Session> Persistence { get; } Property Value IGotrueSessionPersistence<Session> Methods EventHandler(IGotrueClient<User, Session>, AuthState) If you install a persistence listener, it will be called when the user signs in and signs out. public void EventHandler(IGotrueClient<User, Session> sender, Constants.AuthState stateChanged) Parameters sender IGotrueClient<User, Session> stateChanged Constants.AuthState Exceptions ArgumentException ArgumentOutOfRangeException"
  },
  "api/Supabase.Gotrue.ProviderAuthState.html": {
    "href": "api/Supabase.Gotrue.ProviderAuthState.html",
    "title": "Class ProviderAuthState | gotrue-csharp",
    "keywords": "Class ProviderAuthState Namespace Supabase.Gotrue Assembly Supabase.Gotrue.dll Represents an OAuth Provider's URI and Parameters. For use with Provider Auth, PKCE Auth, and ID Token auth. public class ProviderAuthState Inheritance object ProviderAuthState Derived SSOResponse Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ProviderAuthState(Uri) Constructor public ProviderAuthState(Uri uri) Parameters uri Uri Properties PKCEVerifier The PKCE Verifier nonce, only set during a PKCE auth flow. public string? PKCEVerifier { get; set; } Property Value string Uri The Generated Provider's URI public Uri Uri { get; set; } Property Value Uri"
  },
  "api/Supabase.Gotrue.ResetPasswordForEmailOptions.html": {
    "href": "api/Supabase.Gotrue.ResetPasswordForEmailOptions.html",
    "title": "Class ResetPasswordForEmailOptions | gotrue-csharp",
    "keywords": "Class ResetPasswordForEmailOptions Namespace Supabase.Gotrue Assembly Supabase.Gotrue.dll A utility class that represents a successful response from a request to send a user's password reset using the PKCE flow. public class ResetPasswordForEmailOptions Inheritance object ResetPasswordForEmailOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors ResetPasswordForEmailOptions(string) Initializes a new instance of the ResetPasswordForEmailOptions class with the provided email. public ResetPasswordForEmailOptions(string email) Parameters email string The email of the user account for which the password is being reset. Properties CaptchaToken Verification token received when the user completes the captcha on the site. public string? CaptchaToken { get; set; } Property Value string Email The Email representing the user's account whose password is being reset. public string Email { get; } Property Value string FlowType The OAuth Flow Type. public Constants.OAuthFlowType FlowType { get; set; } Property Value Constants.OAuthFlowType PKCEVerifier PKCE Verifier generated if using the PKCE flow type. public string? PKCEVerifier { get; set; } Property Value string RedirectTo The URL to send the user to after they click the password reset link. public string? RedirectTo { get; set; } Property Value string"
  },
  "api/Supabase.Gotrue.ResetPasswordForEmailState.html": {
    "href": "api/Supabase.Gotrue.ResetPasswordForEmailState.html",
    "title": "Class ResetPasswordForEmailState | gotrue-csharp",
    "keywords": "Class ResetPasswordForEmailState Namespace Supabase.Gotrue Assembly Supabase.Gotrue.dll A utility class that represents a successful response from a request to send a user's password reset using the PKCE flow. public class ResetPasswordForEmailState Inheritance object ResetPasswordForEmailState Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties PKCEVerifier PKCE Verifier generated if using the PKCE flow type. public string? PKCEVerifier { get; set; } Property Value string"
  },
  "api/Supabase.Gotrue.Responses.BaseResponse.html": {
    "href": "api/Supabase.Gotrue.Responses.BaseResponse.html",
    "title": "Class BaseResponse | gotrue-csharp",
    "keywords": "Class BaseResponse Namespace Supabase.Gotrue.Responses Assembly Supabase.Gotrue.dll A wrapper class from which all Responses derive. public class BaseResponse Inheritance object BaseResponse Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Content The HTTP response content as a string. [JsonIgnore] public string? Content { get; set; } Property Value string ResponseMessage The HTTP response message. [JsonIgnore] public HttpResponseMessage? ResponseMessage { get; set; } Property Value HttpResponseMessage"
  },
  "api/Supabase.Gotrue.Responses.GenerateLinkResponse.html": {
    "href": "api/Supabase.Gotrue.Responses.GenerateLinkResponse.html",
    "title": "Class GenerateLinkResponse | gotrue-csharp",
    "keywords": "Class GenerateLinkResponse Namespace Supabase.Gotrue.Responses Assembly Supabase.Gotrue.dll An extended user response returned when generating a link. public class GenerateLinkResponse : User Inheritance object User GenerateLinkResponse Inherited Members User.AppMetadata User.Aud User.ConfirmationSentAt User.ConfirmedAt User.CreatedAt User.Email User.EmailConfirmedAt User.Id User.Identities User.InvitedAt User.LastSignInAt User.Phone User.PhoneConfirmedAt User.RecoverySentAt User.Role User.UpdatedAt User.BannedUntil User.IsAnonymous User.Factors User.UserMetadata object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties ActionLink The email link to send to the user. The action_link follows the following format: auth/v1/verify?type={verification_type}&token={hashed_token}&redirect_to={redirect_to} [JsonProperty(\"action_link\")] public string? ActionLink { get; set; } Property Value string EmailOtp The raw email OTP. You should send this in the email if you want your users to verify using an OTP instead of the action link. [JsonProperty(\"email_otp\")] public string? EmailOtp { get; set; } Property Value string HashedToken The hashed token appended to the action link. [JsonProperty(\"hashed_token\")] public string? HashedToken { get; set; } Property Value string RedirectTo The URL appended to the action link. [JsonProperty(\"redirect_to\")] public string? RedirectTo { get; set; } Property Value string VerificationType The verification type that the email link is associated to. [JsonProperty(\"verification_type\")] public string? VerificationType { get; set; } Property Value string"
  },
  "api/Supabase.Gotrue.Responses.html": {
    "href": "api/Supabase.Gotrue.Responses.html",
    "title": "Namespace Supabase.Gotrue.Responses | gotrue-csharp",
    "keywords": "Namespace Supabase.Gotrue.Responses Classes BaseResponse A wrapper class from which all Responses derive. GenerateLinkResponse An extended user response returned when generating a link."
  },
  "api/Supabase.Gotrue.SSOResponse.html": {
    "href": "api/Supabase.Gotrue.SSOResponse.html",
    "title": "Class SSOResponse | gotrue-csharp",
    "keywords": "Class SSOResponse Namespace Supabase.Gotrue Assembly Supabase.Gotrue.dll Single sign on (SSO) response data deserialized from the API {supabaseAuthUrl}/sso public class SSOResponse : ProviderAuthState Inheritance object ProviderAuthState SSOResponse Inherited Members ProviderAuthState.Uri ProviderAuthState.PKCEVerifier object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SSOResponse(Uri) Deserialized response from {supabaseAuthUrl}/sso public SSOResponse(Uri uri) Parameters uri Uri Uri from the response, this will open the SSO providers login page and allow a user to login to their provider"
  },
  "api/Supabase.Gotrue.Session.html": {
    "href": "api/Supabase.Gotrue.Session.html",
    "title": "Class Session | gotrue-csharp",
    "keywords": "Class Session Namespace Supabase.Gotrue Assembly Supabase.Gotrue.dll Represents a Gotrue Session public class Session Inheritance object Session Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties AccessToken The access token jwt. It is recommended to set the JWT_EXPIRY to a shorter expiry value. [JsonProperty(\"access_token\")] public string? AccessToken { get; set; } Property Value string CreatedAt [JsonProperty(\"created_at\")] public DateTime CreatedAt { get; set; } Property Value DateTime ExpiresIn The number of seconds until the token expires (since it was issued). Returned when a login is confirmed. [JsonProperty(\"expires_in\")] public long ExpiresIn { get; set; } Property Value long ProviderRefreshToken The oauth provider refresh token. If present, this can be used to refresh the provider_token via the oauth provider's API. Not all oauth providers return a provider refresh token. If the provider_refresh_token is missing, please refer to the oauth provider's documentation for information on how to obtain the provider refresh token. [JsonProperty(\"provider_refresh_token\")] public string? ProviderRefreshToken { get; set; } Property Value string ProviderToken The oauth provider token. If present, this can be used to make external API requests to the oauth provider used. [JsonProperty(\"provider_token\")] public string? ProviderToken { get; set; } Property Value string RefreshToken A one-time used refresh token that never expires. [JsonProperty(\"refresh_token\")] public string? RefreshToken { get; set; } Property Value string TokenType [JsonProperty(\"token_type\")] public string? TokenType { get; set; } Property Value string User [JsonProperty(\"user\")] public User? User { get; set; } Property Value User Methods Expired() Returns true if the session has expired public bool Expired() Returns bool ExpiresAt() The expiration date of this session, in UTC time. public DateTime ExpiresAt() Returns DateTime"
  },
  "api/Supabase.Gotrue.Settings.html": {
    "href": "api/Supabase.Gotrue.Settings.html",
    "title": "Class Settings | gotrue-csharp",
    "keywords": "Class Settings Namespace Supabase.Gotrue Assembly Supabase.Gotrue.dll Settings data retrieved from the GoTrue server. public class Settings Inheritance object Settings Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties DisableSignup [JsonProperty(\"disable_signup\")] public bool? DisableSignup { get; set; } Property Value bool? ExternalProviders [JsonProperty(\"external\")] public Dictionary<string, bool>? ExternalProviders { get; set; } Property Value Dictionary<string, bool> MFAEnabled [JsonProperty(\"mfa_enabled\")] public bool? MFAEnabled { get; set; } Property Value bool? MailerAutoConfirm [JsonProperty(\"mailer_autoconfirm\")] public bool? MailerAutoConfirm { get; set; } Property Value bool? PhoneAutoConfirm [JsonProperty(\"phone_autoconfirm\")] public bool? PhoneAutoConfirm { get; set; } Property Value bool? SAMLEnabled [JsonProperty(\"saml_enabled\")] public bool? SAMLEnabled { get; set; } Property Value bool? SmsProvider [JsonProperty(\"sms_provider\")] public string? SmsProvider { get; set; } Property Value string"
  },
  "api/Supabase.Gotrue.SignInAnonymouslyOptions.html": {
    "href": "api/Supabase.Gotrue.SignInAnonymouslyOptions.html",
    "title": "Class SignInAnonymouslyOptions | gotrue-csharp",
    "keywords": "Class SignInAnonymouslyOptions Namespace Supabase.Gotrue Assembly Supabase.Gotrue.dll Options for handling signing in anonymously public class SignInAnonymouslyOptions Inheritance object SignInAnonymouslyOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties CaptchaToken Verification token received when the user completes the captcha on the site. [JsonProperty(\"captchaToken\")] public string? CaptchaToken { get; set; } Property Value string Data A custom data object to store the user's metadata. This maps to the auth.users.raw_user_meta_data column. The data should be a JSON serializable object that includes user-specific info, such as their first and last name. [JsonProperty(\"data\")] public Dictionary<string, object>? Data { get; set; } Property Value Dictionary<string, object>"
  },
  "api/Supabase.Gotrue.SignInOptions.html": {
    "href": "api/Supabase.Gotrue.SignInOptions.html",
    "title": "Class SignInOptions | gotrue-csharp",
    "keywords": "Class SignInOptions Namespace Supabase.Gotrue Assembly Supabase.Gotrue.dll Options used for signing in a user. public class SignInOptions Inheritance object SignInOptions Derived SignInWithSSOOptions SignUpOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties FlowType Represents an OAuth Flow type, defaults to Implicit PKCE is recommended for mobile and server-side applications. public Constants.OAuthFlowType FlowType { get; set; } Property Value Constants.OAuthFlowType QueryParams An object of key-value pairs containing query parameters granted to the OAuth application. public Dictionary<string, string>? QueryParams { get; set; } Property Value Dictionary<string, string> RedirectTo A URL or mobile address to send the user to after they are confirmed. public string? RedirectTo { get; set; } Property Value string Scopes A space-separated list of scopes granted to the OAuth application. public string? Scopes { get; set; } Property Value string"
  },
  "api/Supabase.Gotrue.SignInWithPasswordlessEmailOptions.html": {
    "href": "api/Supabase.Gotrue.SignInWithPasswordlessEmailOptions.html",
    "title": "Class SignInWithPasswordlessEmailOptions | gotrue-csharp",
    "keywords": "Class SignInWithPasswordlessEmailOptions Namespace Supabase.Gotrue Assembly Supabase.Gotrue.dll Options used for signing in a user with passwordless Options public class SignInWithPasswordlessEmailOptions : SignInWithPasswordlessOptions Inheritance object SignInWithPasswordlessOptions SignInWithPasswordlessEmailOptions Inherited Members SignInWithPasswordlessOptions.Data SignInWithPasswordlessOptions.CaptchaToken SignInWithPasswordlessOptions.ShouldCreateUser object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SignInWithPasswordlessEmailOptions(string) public SignInWithPasswordlessEmailOptions(string email) Parameters email string The user's email address. Properties Email The user's email address. public string Email { get; } Property Value string EmailRedirectTo The redirect url embedded in the email link. public string? EmailRedirectTo { get; set; } Property Value string FlowType Represents an OAuth Flow type, defaults to Implicit PKCE is recommended for mobile and server-side applications. public Constants.OAuthFlowType FlowType { get; set; } Property Value Constants.OAuthFlowType"
  },
  "api/Supabase.Gotrue.SignInWithPasswordlessOptions.html": {
    "href": "api/Supabase.Gotrue.SignInWithPasswordlessOptions.html",
    "title": "Class SignInWithPasswordlessOptions | gotrue-csharp",
    "keywords": "Class SignInWithPasswordlessOptions Namespace Supabase.Gotrue Assembly Supabase.Gotrue.dll Options used for signing in a user with passwordless Options public class SignInWithPasswordlessOptions Inheritance object SignInWithPasswordlessOptions Derived SignInWithPasswordlessEmailOptions SignInWithPasswordlessPhoneOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields Data A custom data object to store the user's metadata. This maps to the auth.users.user_metadata column. The data should be a JSON serializable object that includes user-specific info, such as their first and last name. public Dictionary<string, object> Data Field Value Dictionary<string, object> Properties CaptchaToken Verification token received when the user completes the captcha on the site. public string? CaptchaToken { get; set; } Property Value string ShouldCreateUser If set to false, this method will not create a new user. Defaults to true. public bool ShouldCreateUser { get; set; } Property Value bool"
  },
  "api/Supabase.Gotrue.SignInWithPasswordlessPhoneOptions.MessagingChannel.html": {
    "href": "api/Supabase.Gotrue.SignInWithPasswordlessPhoneOptions.MessagingChannel.html",
    "title": "Enum SignInWithPasswordlessPhoneOptions.MessagingChannel | gotrue-csharp",
    "keywords": "Enum SignInWithPasswordlessPhoneOptions.MessagingChannel Namespace Supabase.Gotrue Assembly Supabase.Gotrue.dll Represents a messaging channel to use for sending the OTP. public enum SignInWithPasswordlessPhoneOptions.MessagingChannel Fields [MapTo(\"sms\", null)] SMS = 0 SMS [MapTo(\"whatsapp\", null)] WHATSAPP = 1"
  },
  "api/Supabase.Gotrue.SignInWithPasswordlessPhoneOptions.html": {
    "href": "api/Supabase.Gotrue.SignInWithPasswordlessPhoneOptions.html",
    "title": "Class SignInWithPasswordlessPhoneOptions | gotrue-csharp",
    "keywords": "Class SignInWithPasswordlessPhoneOptions Namespace Supabase.Gotrue Assembly Supabase.Gotrue.dll Options used for signing in a user with passwordless Options public class SignInWithPasswordlessPhoneOptions : SignInWithPasswordlessOptions Inheritance object SignInWithPasswordlessOptions SignInWithPasswordlessPhoneOptions Inherited Members SignInWithPasswordlessOptions.Data SignInWithPasswordlessOptions.CaptchaToken SignInWithPasswordlessOptions.ShouldCreateUser object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors SignInWithPasswordlessPhoneOptions(string) public SignInWithPasswordlessPhoneOptions(string phone) Parameters phone string The user's phone number Properties Channel Messaging channel to use (e.g. whatsapp or sms), Defaults to SMS. public SignInWithPasswordlessPhoneOptions.MessagingChannel Channel { get; set; } Property Value SignInWithPasswordlessPhoneOptions.MessagingChannel Phone The user's phone number public string Phone { get; set; } Property Value string"
  },
  "api/Supabase.Gotrue.SignInWithSSOOptions.html": {
    "href": "api/Supabase.Gotrue.SignInWithSSOOptions.html",
    "title": "Class SignInWithSSOOptions | gotrue-csharp",
    "keywords": "Class SignInWithSSOOptions Namespace Supabase.Gotrue Assembly Supabase.Gotrue.dll Options used for signing in a user using single sign on (SSO). public class SignInWithSSOOptions : SignInOptions Inheritance object SignInOptions SignInWithSSOOptions Inherited Members SignInOptions.RedirectTo SignInOptions.Scopes SignInOptions.QueryParams SignInOptions.FlowType object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties CaptchaToken Verification token received when the user completes the captcha on the site. [JsonProperty(\"captchaToken\")] public string? CaptchaToken { get; set; } Property Value string"
  },
  "api/Supabase.Gotrue.SignUpOptions.html": {
    "href": "api/Supabase.Gotrue.SignUpOptions.html",
    "title": "Class SignUpOptions | gotrue-csharp",
    "keywords": "Class SignUpOptions Namespace Supabase.Gotrue Assembly Supabase.Gotrue.dll Options used for signing up a user. public class SignUpOptions : SignInOptions Inheritance object SignInOptions SignUpOptions Inherited Members SignInOptions.RedirectTo SignInOptions.Scopes SignInOptions.QueryParams SignInOptions.FlowType object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Data Optional user metadata. public Dictionary<string, object>? Data { get; set; } Property Value Dictionary<string, object>"
  },
  "api/Supabase.Gotrue.StatelessClient.StatelessClientOptions.html": {
    "href": "api/Supabase.Gotrue.StatelessClient.StatelessClientOptions.html",
    "title": "Class StatelessClient.StatelessClientOptions | gotrue-csharp",
    "keywords": "Class StatelessClient.StatelessClientOptions Namespace Supabase.Gotrue Assembly Supabase.Gotrue.dll Class representation options available to the Client. public class StatelessClient.StatelessClientOptions Inheritance object StatelessClient.StatelessClientOptions Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Fields Headers Headers to be sent with subsequent requests. public readonly Dictionary<string, string> Headers Field Value Dictionary<string, string> Properties AllowUnconfirmedUserSessions Very unlikely this flag needs to be changed except in very specific contexts. Enables tests to be E2E tests to be run without requiring users to have confirmed emails - mirrors the Gotrue server's configuration. public bool AllowUnconfirmedUserSessions { get; set; } Property Value bool Url Gotrue Endpoint public string Url { get; set; } Property Value string"
  },
  "api/Supabase.Gotrue.StatelessClient.html": {
    "href": "api/Supabase.Gotrue.StatelessClient.html",
    "title": "Class StatelessClient | gotrue-csharp",
    "keywords": "Class StatelessClient Namespace Supabase.Gotrue Assembly Supabase.Gotrue.dll Supports all classes in the .NET class hierarchy and provides low-level services to derived classes. This is the ultimate base class of all .NET classes; it is the root of the type hierarchy. public class StatelessClient : IGotrueStatelessClient<User, Session> Inheritance object StatelessClient Implements IGotrueStatelessClient<User, Session> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Methods Challenge(string, MfaChallengeParams, StatelessClientOptions) Prepares a challenge used to verify that a user has access to a MFA factor. public Task<MfaChallengeResponse?> Challenge(string jwt, MfaChallengeParams mfaChallengeParams, StatelessClient.StatelessClientOptions options) Parameters jwt string mfaChallengeParams MfaChallengeParams options StatelessClient.StatelessClientOptions Returns Task<MfaChallengeResponse> ChallengeAndVerify(string, MfaChallengeAndVerifyParams, StatelessClientOptions) Helper method which creates a challenge and immediately uses the given code to verify against it thereafter. The verification code is provided by the user by entering a code seen in their authenticator app. public Task<MfaVerifyResponse?> ChallengeAndVerify(string jwt, MfaChallengeAndVerifyParams mfaChallengeAndVerifyParams, StatelessClient.StatelessClientOptions options) Parameters jwt string mfaChallengeAndVerifyParams MfaChallengeAndVerifyParams options StatelessClient.StatelessClientOptions Returns Task<MfaVerifyResponse> CreateUser(string, StatelessClientOptions, AdminUserAttributes) Create a user public Task<User?> CreateUser(string serviceRoleToken, StatelessClient.StatelessClientOptions options, AdminUserAttributes attributes) Parameters serviceRoleToken string A valid JWT. Must be a full-access API key (e.g. service_role key). options StatelessClient.StatelessClientOptions attributes AdminUserAttributes Returns Task<User> CreateUser(string, StatelessClientOptions, string, string, AdminUserAttributes?) Create a user public Task<User?> CreateUser(string serviceRoleToken, StatelessClient.StatelessClientOptions options, string email, string password, AdminUserAttributes? attributes = null) Parameters serviceRoleToken string A valid JWT. Must be a full-access API key (e.g. service_role key). options StatelessClient.StatelessClientOptions email string password string attributes AdminUserAttributes Returns Task<User> DeleteUser(string, string, StatelessClientOptions) Deletes a User. public Task<bool> DeleteUser(string uid, string serviceRoleToken, StatelessClient.StatelessClientOptions options) Parameters uid string serviceRoleToken string this token needs role 'supabase_admin' or 'service_role' options StatelessClient.StatelessClientOptions Returns Task<bool> Enroll(string, MfaEnrollParams, StatelessClientOptions) Starts the enrollment process for a new Multi-Factor Authentication (MFA) factor. This method creates a new unverified factor. To verify a factor, present the QR code or secret to the user and ask them to add it to their authenticator app. The user has to enter the code from their authenticator app to verify it. Upon verifying a factor, all other sessions are logged out and the current session's authenticator level is promoted to aal2. public Task<MfaEnrollResponse?> Enroll(string jwt, MfaEnrollParams mfaEnrollParams, StatelessClient.StatelessClientOptions options) Parameters jwt string mfaEnrollParams MfaEnrollParams options StatelessClient.StatelessClientOptions Returns Task<MfaEnrollResponse> ExchangeCodeForSession(string, string, StatelessClientOptions) Logs in an existing user via a third-party provider. public Task<Session?> ExchangeCodeForSession(string codeVerifier, string authCode, StatelessClient.StatelessClientOptions options) Parameters codeVerifier string authCode string options StatelessClient.StatelessClientOptions Returns Task<Session> GetApi(StatelessClientOptions) Initialize/retrieve the underlying API for this client public IGotrueApi<User, Session> GetApi(StatelessClient.StatelessClientOptions options) Parameters options StatelessClient.StatelessClientOptions Returns IGotrueApi<User, Session> GetAuthenticatorAssuranceLevel(string, StatelessClientOptions) Returns the Authenticator Assurance Level (AAL) for the active session. aal1 (or null) means that the user's identity has been verified only with a conventional login (email+password, OTP, magic link, social login, etc.). aal2 means that the user's identity has been verified both with a conventional login and at least one MFA factor. Although this method returns a promise, it's fairly quick (microseconds) and rarely uses the network. You can use this to check whether the current user needs to be shown a screen to verify their MFA factors. public Task<MfaGetAuthenticatorAssuranceLevelResponse?> GetAuthenticatorAssuranceLevel(string jwt, StatelessClient.StatelessClientOptions options) Parameters jwt string options StatelessClient.StatelessClientOptions Returns Task<MfaGetAuthenticatorAssuranceLevelResponse> GetSessionFromUrl(Uri, StatelessClientOptions) Parses a Session out of a Uri's Query parameters. public Task<Session?> GetSessionFromUrl(Uri uri, StatelessClient.StatelessClientOptions options) Parameters uri Uri options StatelessClient.StatelessClientOptions Returns Task<Session> GetUser(string, StatelessClientOptions) Get User details by JWT. Can be used to validate a JWT. public Task<User?> GetUser(string serviceRoleToken, StatelessClient.StatelessClientOptions options) Parameters serviceRoleToken string A valid JWT. Must be a JWT that originates from a user. options StatelessClient.StatelessClientOptions Returns Task<User> GetUserById(string, StatelessClientOptions, string) Get User details by Id public Task<User?> GetUserById(string serviceRoleToken, StatelessClient.StatelessClientOptions options, string userId) Parameters serviceRoleToken string A valid JWT. Must be a full-access API key (e.g. service_role key). options StatelessClient.StatelessClientOptions userId string Returns Task<User> InviteUserByEmail(string, string, StatelessClientOptions, InviteUserByEmailOptions?) Sends an invite email link to the specified email. public Task<bool> InviteUserByEmail(string email, string serviceRoleToken, StatelessClient.StatelessClientOptions options, InviteUserByEmailOptions? invitationOptions = null) Parameters email string serviceRoleToken string this token needs role 'supabase_admin' or 'service_role' options StatelessClient.StatelessClientOptions invitationOptions InviteUserByEmailOptions Returns Task<bool> ListFactors(string, StatelessClientOptions) Returns the list of MFA factors enabled for this user public Task<MfaListFactorsResponse?> ListFactors(string jwt, StatelessClient.StatelessClientOptions options) Parameters jwt string options StatelessClient.StatelessClientOptions Returns Task<MfaListFactorsResponse> ListUsers(string, StatelessClientOptions, string?, string?, SortOrder, int?, int?) Lists users public Task<UserList<User>?> ListUsers(string serviceRoleToken, StatelessClient.StatelessClientOptions options, string? filter = null, string? sortBy = null, Constants.SortOrder sortOrder = SortOrder.Descending, int? page = null, int? perPage = null) Parameters serviceRoleToken string A valid JWT. Must be a full-access API key (e.g. service_role key). options StatelessClient.StatelessClientOptions filter string A string for example part of the email sortBy string Snake case string of the given key, currently only created_at is supported sortOrder Constants.SortOrder asc or desc, if null desc is used page int? page to show for pagination perPage int? items per page for pagination Returns Task<UserList<User>> RefreshToken(string, string, StatelessClientOptions) Refreshes a Token public Task<Session?> RefreshToken(string accessToken, string refreshToken, StatelessClient.StatelessClientOptions options) Parameters accessToken string refreshToken string options StatelessClient.StatelessClientOptions Returns Task<Session> ResetPasswordForEmail(string, StatelessClientOptions) Sends a reset request to an email address. public Task<bool> ResetPasswordForEmail(string email, StatelessClient.StatelessClientOptions options) Parameters email string options StatelessClient.StatelessClientOptions Returns Task<bool> Exceptions Exception SendMagicLink(string, StatelessClientOptions, SignInOptions?) Sends a Magic email login link to the specified email. public Task<bool> SendMagicLink(string email, StatelessClient.StatelessClientOptions options, SignInOptions? signInOptions = null) Parameters email string options StatelessClient.StatelessClientOptions signInOptions SignInOptions Returns Task<bool> Settings(StatelessClientOptions) Retrieve the current settings for the Gotrue instance. public Task<Settings?> Settings(StatelessClient.StatelessClientOptions options) Parameters options StatelessClient.StatelessClientOptions Returns Task<Settings> SignIn(Provider, StatelessClientOptions, SignInOptions?) Retrieves a Url to redirect to for signing in with a Constants.Provider. This method will need to be combined with GetSessionFromUrl(Uri, StatelessClientOptions) when the Application receives the Oauth Callback. public ProviderAuthState SignIn(Constants.Provider provider, StatelessClient.StatelessClientOptions options, SignInOptions? signInOptions = null) Parameters provider Constants.Provider options StatelessClient.StatelessClientOptions signInOptions SignInOptions Returns ProviderAuthState Examples var client = Supabase.Gotrue.Client.Initialize(options); var url = client.SignIn(Provider.Github); // Do Redirect User // Example code Application.HasReceivedOauth += async (uri) => { var session = await client.GetSessionFromUri(uri, true); } SignIn(SignInType, string, string?, StatelessClientOptions?) Log in an existing user, or login via a third-party provider. public Task<Session?> SignIn(Constants.SignInType type, string identifierOrToken, string? password = null, StatelessClient.StatelessClientOptions? options = null) Parameters type Constants.SignInType Type of Credentials being passed identifierOrToken string An email, phone, or RefreshToken password string Password to account (optional if RefreshToken) options StatelessClient.StatelessClientOptions Returns Task<Session> SignIn(string, StatelessClientOptions, SignInOptions?) Sends a Magic email login link to the specified email. public Task<bool> SignIn(string email, StatelessClient.StatelessClientOptions options, SignInOptions? signInOptions = null) Parameters email string options StatelessClient.StatelessClientOptions signInOptions SignInOptions Returns Task<bool> SignIn(string, string, StatelessClientOptions) Signs in a User with an email address and password. public Task<Session?> SignIn(string email, string password, StatelessClient.StatelessClientOptions options) Parameters email string password string options StatelessClient.StatelessClientOptions Returns Task<Session> SignOut(string, StatelessClientOptions) Logout a User This will revoke all refresh tokens for the user. JWT tokens will still be valid for stateless auth until they expire. public Task<bool> SignOut(string accessToken, StatelessClient.StatelessClientOptions options) Parameters accessToken string options StatelessClient.StatelessClientOptions Returns Task<bool> SignUp(SignUpType, string, string, StatelessClientOptions, SignUpOptions?) Signs up a user public Task<Session?> SignUp(Constants.SignUpType type, string identifier, string password, StatelessClient.StatelessClientOptions options, SignUpOptions? signUpOptions = null) Parameters type Constants.SignUpType Type of signup identifier string Phone or Email password string options StatelessClient.StatelessClientOptions signUpOptions SignUpOptions Object containing redirectTo and optional user metadata (data) Returns Task<Session> SignUp(string, string, StatelessClientOptions, SignUpOptions?) Signs up a user by email address public Task<Session?> SignUp(string email, string password, StatelessClient.StatelessClientOptions options, SignUpOptions? signUpOptions = null) Parameters email string password string options StatelessClient.StatelessClientOptions signUpOptions SignUpOptions Object containing redirectTo and optional user metadata (data) Returns Task<Session> Unenroll(string, MfaUnenrollParams, StatelessClientOptions) Unenroll removes a MFA factor. A user has to have an aal2 authenticator level in order to unenroll a verified factor. public Task<MfaUnenrollResponse?> Unenroll(string jwt, MfaUnenrollParams mfaUnenrollParams, StatelessClient.StatelessClientOptions options) Parameters jwt string mfaUnenrollParams MfaUnenrollParams options StatelessClient.StatelessClientOptions Returns Task<MfaUnenrollResponse> Update(string, UserAttributes, StatelessClientOptions) Updates a User's attributes public Task<User?> Update(string accessToken, UserAttributes attributes, StatelessClient.StatelessClientOptions options) Parameters accessToken string attributes UserAttributes options StatelessClient.StatelessClientOptions Returns Task<User> UpdateUserById(string, StatelessClientOptions, string, AdminUserAttributes) Update user by Id public Task<User?> UpdateUserById(string serviceRoleToken, StatelessClient.StatelessClientOptions options, string userId, AdminUserAttributes userData) Parameters serviceRoleToken string A valid JWT. Must be a full-access API key (e.g. service_role key). options StatelessClient.StatelessClientOptions userId string userData AdminUserAttributes Returns Task<User> Verify(string, MfaVerifyParams, StatelessClientOptions) Verifies a code against a challenge. The verification code is provided by the user by entering a code seen in their authenticator app. public Task<MfaVerifyResponse?> Verify(string jwt, MfaVerifyParams mfaVerifyParams, StatelessClient.StatelessClientOptions options) Parameters jwt string mfaVerifyParams MfaVerifyParams options StatelessClient.StatelessClientOptions Returns Task<MfaVerifyResponse> VerifyOTP(string, string, StatelessClientOptions, EmailOtpType) Log in a user give a user supplied OTP received via email. public Task<Session?> VerifyOTP(string email, string otpToken, StatelessClient.StatelessClientOptions options, Constants.EmailOtpType type = EmailOtpType.MagicLink) Parameters email string otpToken string options StatelessClient.StatelessClientOptions type Constants.EmailOtpType Returns Task<Session> VerifyOTP(string, string, StatelessClientOptions, MobileOtpType) Log in a user given a User supplied OTP received via mobile. public Task<Session?> VerifyOTP(string phone, string otpToken, StatelessClient.StatelessClientOptions options, Constants.MobileOtpType type = MobileOtpType.SMS) Parameters phone string The user's phone number. otpToken string Token sent to the user's phone. options StatelessClient.StatelessClientOptions type Constants.MobileOtpType Returns Task<Session> VerifyTokenHash(string, StatelessClientOptions, EmailOtpType) Log in a user given the token hash used in an email confirmation link. public Task<Session?> VerifyTokenHash(string tokenHash, StatelessClient.StatelessClientOptions options, Constants.EmailOtpType type = EmailOtpType.Email) Parameters tokenHash string options StatelessClient.StatelessClientOptions type Constants.EmailOtpType Returns Task<Session>"
  },
  "api/Supabase.Gotrue.TokenRefresh.html": {
    "href": "api/Supabase.Gotrue.TokenRefresh.html",
    "title": "Class TokenRefresh | gotrue-csharp",
    "keywords": "Class TokenRefresh Namespace Supabase.Gotrue Assembly Supabase.Gotrue.dll Manages the auto-refresh of the Gotrue Session. public class TokenRefresh Inheritance object TokenRefresh Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Constructors TokenRefresh(Client) Sets up the TokenRefresh class, bound to a specific client public TokenRefresh(Client client) Parameters client Client Fields Debug Turn on debug logging for the TokenRefresh public bool Debug Field Value bool Methods ManageAutoRefresh(IGotrueClient<User, Session>, AuthState) Turns the auto-refresh timer on or off based on the current auth state public void ManageAutoRefresh(IGotrueClient<User, Session> sender, Constants.AuthState stateChanged) Parameters sender IGotrueClient<User, Session> The Client and Session data stateChanged Constants.AuthState Exceptions ArgumentOutOfRangeException"
  },
  "api/Supabase.Gotrue.User.html": {
    "href": "api/Supabase.Gotrue.User.html",
    "title": "Class User | gotrue-csharp",
    "keywords": "Class User Namespace Supabase.Gotrue Assembly Supabase.Gotrue.dll Represents a Gotrue User Ref: https://supabase.github.io/gotrue-js/interfaces/User.html public class User Inheritance object User Derived GenerateLinkResponse Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties AppMetadata [JsonProperty(\"app_metadata\")] public Dictionary<string, object> AppMetadata { get; set; } Property Value Dictionary<string, object> Aud [JsonProperty(\"aud\")] public string? Aud { get; set; } Property Value string BannedUntil [JsonProperty(\"banned_until\")] public DateTime? BannedUntil { get; set; } Property Value DateTime? ConfirmationSentAt [JsonProperty(\"confirmation_sent_at\")] public DateTime? ConfirmationSentAt { get; set; } Property Value DateTime? ConfirmedAt [JsonProperty(\"confirmed_at\")] public DateTime? ConfirmedAt { get; set; } Property Value DateTime? CreatedAt [JsonProperty(\"created_at\")] public DateTime CreatedAt { get; set; } Property Value DateTime Email [JsonProperty(\"email\")] public string? Email { get; set; } Property Value string EmailConfirmedAt [JsonProperty(\"email_confirmed_at\")] public DateTime? EmailConfirmedAt { get; set; } Property Value DateTime? Factors [JsonProperty(\"factors\")] public List<Factor> Factors { get; set; } Property Value List<Factor> Id [JsonProperty(\"id\")] public string? Id { get; set; } Property Value string Identities [JsonProperty(\"identities\")] public List<UserIdentity> Identities { get; set; } Property Value List<UserIdentity> InvitedAt [JsonProperty(\"invited_at\")] public DateTime? InvitedAt { get; set; } Property Value DateTime? IsAnonymous [JsonProperty(\"is_anonymous\")] public bool IsAnonymous { get; set; } Property Value bool LastSignInAt [JsonProperty(\"last_sign_in_at\")] public DateTime? LastSignInAt { get; set; } Property Value DateTime? Phone [JsonProperty(\"phone\")] public string? Phone { get; set; } Property Value string PhoneConfirmedAt [JsonProperty(\"phone_confirmed_at\")] public DateTime? PhoneConfirmedAt { get; set; } Property Value DateTime? RecoverySentAt [JsonProperty(\"recovery_sent_at\")] public DateTime? RecoverySentAt { get; set; } Property Value DateTime? Role [JsonProperty(\"role\")] public string? Role { get; set; } Property Value string UpdatedAt [JsonProperty(\"updated_at\")] public DateTime? UpdatedAt { get; set; } Property Value DateTime? UserMetadata [JsonProperty(\"user_metadata\")] public Dictionary<string, object> UserMetadata { get; set; } Property Value Dictionary<string, object>"
  },
  "api/Supabase.Gotrue.UserAttributes.html": {
    "href": "api/Supabase.Gotrue.UserAttributes.html",
    "title": "Class UserAttributes | gotrue-csharp",
    "keywords": "Class UserAttributes Namespace Supabase.Gotrue Assembly Supabase.Gotrue.dll Ref: https://supabase.github.io/gotrue-js/interfaces/UserAttributes.html public class UserAttributes Inheritance object UserAttributes Derived AdminUserAttributes Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Data A custom data object for user_metadata that a user can modify.Can be any JSON. [JsonProperty(\"data\")] public Dictionary<string, object> Data { get; set; } Property Value Dictionary<string, object> Email [JsonProperty(\"email\")] public string? Email { get; set; } Property Value string EmailChangeToken [JsonProperty(\"email_change_token\")] public string? EmailChangeToken { get; set; } Property Value string Nonce [JsonProperty(\"nonce\")] public string? Nonce { get; set; } Property Value string Password [JsonProperty(\"password\")] public string? Password { get; set; } Property Value string Phone [JsonProperty(\"phone\")] public string? Phone { get; set; } Property Value string"
  },
  "api/Supabase.Gotrue.UserIdentity.html": {
    "href": "api/Supabase.Gotrue.UserIdentity.html",
    "title": "Class UserIdentity | gotrue-csharp",
    "keywords": "Class UserIdentity Namespace Supabase.Gotrue Assembly Supabase.Gotrue.dll Ref: https://supabase.github.io/gotrue-js/interfaces/UserIdentity.html public class UserIdentity Inheritance object UserIdentity Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties CreatedAt [JsonProperty(\"created_at\")] public DateTime CreatedAt { get; set; } Property Value DateTime Id [JsonProperty(\"id\")] public string? Id { get; set; } Property Value string IdentityData [JsonProperty(\"identity_data\")] public Dictionary<string, object> IdentityData { get; set; } Property Value Dictionary<string, object> IdentityId [JsonProperty(\"identity_id\")] public string IdentityId { get; set; } Property Value string LastSignInAt [JsonProperty(\"last_sign_in_at\")] public DateTime LastSignInAt { get; set; } Property Value DateTime Provider [JsonProperty(\"provider\")] public string? Provider { get; set; } Property Value string UpdatedAt [JsonProperty(\"updated_at\")] public DateTime? UpdatedAt { get; set; } Property Value DateTime? UserId [JsonProperty(\"user_id\")] public string? UserId { get; set; } Property Value string"
  },
  "api/Supabase.Gotrue.UserList-1.html": {
    "href": "api/Supabase.Gotrue.UserList-1.html",
    "title": "Class UserList<TUser> | gotrue-csharp",
    "keywords": "Class UserList<TUser> Namespace Supabase.Gotrue Assembly Supabase.Gotrue.dll public class UserList<TUser> where TUser : User Type Parameters TUser Inheritance object UserList<TUser> Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Aud [JsonProperty(\"aud\")] public string? Aud { get; set; } Property Value string Users [JsonProperty(\"users\")] public List<TUser> Users { get; set; } Property Value List<TUser>"
  },
  "api/Supabase.Gotrue.VerifyOTPParams.html": {
    "href": "api/Supabase.Gotrue.VerifyOTPParams.html",
    "title": "Class VerifyOTPParams | gotrue-csharp",
    "keywords": "Class VerifyOTPParams Namespace Supabase.Gotrue Assembly Supabase.Gotrue.dll Ref: https://supabase.github.io/gotrue-js/interfaces/VerifyEmailOTPParams.html public class VerifyOTPParams Inheritance object VerifyOTPParams Inherited Members object.Equals(object) object.Equals(object, object) object.GetHashCode() object.GetType() object.MemberwiseClone() object.ReferenceEquals(object, object) object.ToString() Properties Email [JsonProperty(\"email\")] public string? Email { get; set; } Property Value string Phone [JsonProperty(\"phone\")] public string? Phone { get; set; } Property Value string Token [JsonProperty(\"token\")] public string? Token { get; set; } Property Value string Type [JsonProperty(\"type\")] public string? Type { get; set; } Property Value string"
  },
  "api/Supabase.Gotrue.html": {
    "href": "api/Supabase.Gotrue.html",
    "title": "Namespace Supabase.Gotrue | gotrue-csharp",
    "keywords": "Namespace Supabase.Gotrue Classes AdminClient Admin client for interacting with the Gotrue API. Intended for use on servers or other secure environments. This client does NOT manage user sessions or track any other state. AdminUserAttributes Ref: https://supabase.github.io/gotrue-js/interfaces/AdminUserAttributes.html Api The REST calls to the Gotrue API. Client Supports all classes in the .NET class hierarchy and provides low-level services to derived classes. This is the ultimate base class of all .NET classes; it is the root of the type hierarchy. ClientOptions Class representation options available to the Client. Constants Constants used throughout the Gotrue Client DebugNotification Manages the debug listeners for the Gotrue Client. You'll want to install a debug listener to get debug information back - especially for errors from the background RefreshToken thread. GenerateLinkEmailChangeCurrentOptions Shortcut options for EmailChangeCurrent GenerateLinkEmailChangeNewOptions Shortcut options for EmailChangeNew GenerateLinkOptions Options for Generating an Email Link GenerateLinkSignupOptions Shortcut options for SignUp Helpers Utility methods to assist with flow. Includes nonce generation and verification. InviteUserByEmailOptions A utility class that represents options for sending a User an Invitation NetworkStatus A Network status system to pair with the OnlineClient. https://learn.microsoft.com/en-us/dotnet/fundamentals/networking/network-info PasswordlessSignInState A utility class that represents a successful response from a request to send a user Passwordless Sign In. PersistenceListener Manages the persistence of the Gotrue Session. You'll want to install a persistence listener to persist user sessions between app restarts. ProviderAuthState Represents an OAuth Provider's URI and Parameters. For use with Provider Auth, PKCE Auth, and ID Token auth. ResetPasswordForEmailOptions A utility class that represents a successful response from a request to send a user's password reset using the PKCE flow. ResetPasswordForEmailState A utility class that represents a successful response from a request to send a user's password reset using the PKCE flow. SSOResponse Single sign on (SSO) response data deserialized from the API {supabaseAuthUrl}/sso Session Represents a Gotrue Session Settings Settings data retrieved from the GoTrue server. SignInAnonymouslyOptions Options for handling signing in anonymously SignInOptions Options used for signing in a user. SignInWithPasswordlessEmailOptions Options used for signing in a user with passwordless Options SignInWithPasswordlessOptions Options used for signing in a user with passwordless Options SignInWithPasswordlessPhoneOptions Options used for signing in a user with passwordless Options SignInWithSSOOptions Options used for signing in a user using single sign on (SSO). SignUpOptions Options used for signing up a user. StatelessClient Supports all classes in the .NET class hierarchy and provides low-level services to derived classes. This is the ultimate base class of all .NET classes; it is the root of the type hierarchy. StatelessClient.StatelessClientOptions Class representation options available to the Client. TokenRefresh Manages the auto-refresh of the Gotrue Session. User Represents a Gotrue User Ref: https://supabase.github.io/gotrue-js/interfaces/User.html UserAttributes Ref: https://supabase.github.io/gotrue-js/interfaces/UserAttributes.html UserIdentity Ref: https://supabase.github.io/gotrue-js/interfaces/UserIdentity.html UserList<TUser> VerifyOTPParams Ref: https://supabase.github.io/gotrue-js/interfaces/VerifyEmailOTPParams.html Enums Constants.AuthState States that the Auth Client will raise events for. Constants.EmailOtpType Constants.MobileOtpType Constants.OAuthFlowType Represents an OAuth Flow type Constants.Provider Providers available to Supabase Ref: https://supabase.github.io/gotrue-js/modules.html#Provider Constants.SignInType Specifies the functionality expected from the SignIn method Constants.SignOutScope Constants.SignUpType Specifies the functionality expected from the SignUp method Constants.SortOrder GenerateLinkOptions.LinkType Mapping of link types that can be generated. SignInWithPasswordlessPhoneOptions.MessagingChannel Represents a messaging channel to use for sending the OTP. Delegates NetworkStatus.NetworkListener A delegate for listening to network changes."
  },
  "index.html": {
    "href": "index.html",
    "title": "gotrue-csharp | gotrue-csharp",
    "keywords": "gotrue-csharp"
  }
}